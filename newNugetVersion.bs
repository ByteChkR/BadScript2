function FindNode(n, string name!)
{
	foreach(node in n)
	{
		if(node.Name == name)
		{
			return node;
		}
	}
}

function ChangeVersion(string file!, string versionFormat!)
{
	const content = Xml.Load(IO.File.ReadAllText(file));
	const package = FindNode(content, "package");
	if(package == null)
	{
		Console.WriteLine($"Could not find 'package' element in {file}");
		return;
	}
	
	const metadata = FindNode(package, "metadata");
	if(metadata == null)
	{
		Console.WriteLine($"Could not find 'metadata' element in {file}::package");
		return;
	}

	const versionElement = FindNode(metadata, "version");
	if(versionElement == null)
	{
		Console.WriteLine($"Could not find 'version' element in {file}::package::metadata");
		versionElement = content.CreateElement("version");
		versionElement.InnerText = "1.0.0.0";
		metadata.AppendChild(versionElement);
	}
	const version = new Version(versionElement.InnerText);
	const newVersion = version.ChangeVersion(versionFormat);

	versionElement.InnerText = newVersion.ToString();
	content.Save(file);
	return newVersion.ToString();
}

function ChangeDependencies(string file!, Table versionTable!)
{
	const content = Xml.Load(IO.File.ReadAllText(file));
	const name = IO.Path.GetFileNameWithoutExtension(file);
	const package = FindNode(content, "package");
	if(package == null)
	{
		Console.WriteLine($"Could not find 'package' element in {file}");
		return;
	}
	
	const metadata = FindNode(package, "metadata");
	if(metadata == null)
	{
		Console.WriteLine($"Could not find 'metadata' element in {file}::package");
		return;
	}

	const dependenices = FindNode(metadata, "dependencies");
	if(dependenices == null)
	{
		Console.WriteLine($"Could not find 'dependencies' element in {file}::package::metadata");
		return;
	}

	let changed = false;
	foreach(group in dependenices)
	{
		foreach(dependency in group)
		{
			const id = FindNode(dependency.Attributes, "id");
			if(id.Value in versionTable)
			{
				const version = FindNode(dependency.Attributes, "version");
				const newVersion = versionTable[id.Value];
				Console.WriteLine($"{name} Updating Dependency: {id.Value} to {newVersion}");
				version.Value = newVersion;
				changed = true;
			}
		}
	}

	if(changed)
	{
		content.Save(file);
	}
}

function Main(Array args!)
{
	const versionFormat = args.Length > 0 ? args[0] : "(~){yyyy}.(~){MM}.(~){dd}.+";
	const sourceDir = args.Length > 1 ? args[1] : "./src";
	const specFiles = IO.Directory.GetFiles(sourceDir, ".nuspec", true);
	Console.WriteLine("Updating Nuget Versions");

	const versionTable = {};

	foreach(file in specFiles)
	{
		const name = IO.Path.GetFileNameWithoutExtension(file);
		try
		{
			versionTable[name] = ChangeVersion(file, versionFormat);
		}
		catch(e)
		{
			throw e;
		}
	}

	Console.WriteLine($"New Versions: {versionTable}");

	foreach(file in specFiles)
	{
		const name = IO.Path.GetFileNameWithoutExtension(file);
		try
		{
			ChangeDependencies(file, versionTable);
		}
		catch(e)
		{
			throw e;
		}
	}
}

Main(Runtime.GetArguments());