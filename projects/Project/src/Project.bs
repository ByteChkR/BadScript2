

#import Package from Runtime
#import System from Package
const Assert = System.Assert;
const Logging = System.Logging;
const SourceReader = System.SourceReader;

class ProjectLogger : Logging.TagLogger
{
	function ProjectLogger()
	{
		base.TagLogger();
	}

	function Log(msg)
	{
		base.Log($"[PROJ] {msg}");
	}

	function Warn(msg)
	{
		base.Warn($"[PROJ] {msg}");
	}
}

let Logger = new ProjectLogger();
Logger.OnLog += Console.WriteLine;
Logger.OnWarn += Console.WriteLine;

class Project
{
	
	let settings;
	let preprocessTasks;
	let postprocessTasks;
	let globalTasks;


	function Project()
	{
		settings = {}
		preprocessTasks = [];
		postprocessTasks = [];
		globalTasks = [];
	}

	function AddSetting(name!, setting!)
	{
		Assert.IsString(name);
		Logger.Log($"Add Setting '{name}'");
		settings[name] = setting;
		return this;
	}

	function AddSource(file!)
	{
		if(!settings.Keys.Contains("Sources"))
		{
			settings.Sources = [];
		}

		Logger.Log($"Add Source '{file}'");
		settings.Sources.Add(file);
		return this;
	}

	function GetSettings() => settings;

	function GetSetting(name!)
	{
		Assert.IsString(name);
		if(!settings.Keys.Contains(name))
		{
			throw $"Setting '{name}' does not exist";
		}

		return settings[name];
	}

	function LoadSetting(name!, file!)
	{
		Assert.IsString(name);
		Assert.IsString(file);
		AddSetting(name, Json.FromJson(IO.File.ReadAllText(file)));
		return this;
	}


	function AddGlobalTask(name!, func!)
	{
		Assert.IsString(name);
		Assert.IsFunction(func);
		Logger.Log($"Add Global Task '{name}'");
		globalTasks.Add({name: name, func: func});
		return this;
	}

	function AddPreprocessTask(name!, func!)
	{
		Assert.IsString(name);
		Assert.IsFunction(func);
		preprocessTasks.Add({name: name, func: func});
		return this;
	}

	function AddPostprocessTask(name!, func!)
	{
		Assert.IsString(name);
		Assert.IsFunction(func);
		postprocessTasks.Add({name: name, func: func});
		return this;
	}

	function ExpandSourceFiles()
	{
		let sourceFiles = GetSetting("Sources");
		Console.WriteLine($"Expanding Source Files: {sourceFiles}");
		for(let i = sourceFiles.Length - 1; i >= 0; i--)
		{
			const file = sourceFiles[i];
			if(file.Contains("*"))
			{
				sourceFiles.RemoveAt(i);
				const parts = file.Split("*");
				const dir = parts[0];
				const ext = parts[1];
				sourceFiles.InsertRange(i, IO.Directory.GetFiles(dir, ext, false));
			}
		}
		Console.WriteLine($"Expanded Source Files: {sourceFiles}");
	}

	function Run()
	{
		ExpandSourceFiles();

		foreach(globalTask in globalTasks)
		{
			Logger.Log($"Running Task: {globalTask.name}");
			globalTask.func();
		}

		let sourceFiles = GetSetting("Sources");

		for(let i = 0; i < sourceFiles.Length; i++)
		{
			foreach(preTask in preprocessTasks)
			{
				Logger.Log($"Running Preprocess Task '{preTask.name}' on '{sourceFiles[i]}'");
				sourceFiles[i] = preTask.func(sourceFiles[i]);
			}
		}


		Logger.Log("Combining Source Files...");
		let src = "";
		foreach(sourceFile in sourceFiles)
		{
			src += $"{IO.File.ReadAllText(sourceFile)}\n";
		}

		foreach(postTask in postprocessTasks)
		{
			Logger.Log($"Running Postprocess Task '{postTask.name}'");
			src = postTask.func(src);
		}
	}
}

Runtime.Export("Project", Project);

