const libLoaders = {}
libLoaders[".bs"] = function(file, content) => IO.File.WriteAllText(file, content);
libLoaders[".defl"] = function(file, content) => IO.File.WriteAllBytes(file, Compression.Deflate.Compress(content));
libLoaders[".gzip"] = function(file, content) => IO.File.WriteAllBytes(file, Compression.GZip.Compress(content));
libLoaders[".zlib"] = function(file, content) => IO.File.WriteAllBytes(file, Compression.ZLib.Compress(content));

function GetLoader(file)
{
	const ext = IO.Path.GetExtension(file);
	if(!libLoaders.Keys.Contains(ext))
	{
		throw $"Can not find loader for {file}";
	}
	return libLoaders[ext];
}

function SaveToFile(output)
{
	function SaveToFile(src)
	{			
		Console.WriteLine($"Output: {output}")
		IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(IO.Path.GetFullPath(output)));
		GetLoader(output)(output, src);
		return src;
	}

	return SaveToFile;
}

function InstallToLib(project)
{
	let appName = project.GetSetting("AppInfo").Name;
	return SaveToFile(IO.Path.Combine(IO.Directory.GetStartupDirectory(), "data", "subsystems", "run", "libs", appName + ".bs"));
}

function InstallToRun(project)
{
	let appName = project.GetSetting("AppInfo").Name;
	return SaveToFile(IO.Path.Combine(IO.Directory.GetStartupDirectory(), "data", "subsystems", "run", appName + ".bs"));
}


function InstallToStartup(project)
{
	let appName = project.GetSetting("AppInfo").Name;
	return SaveToFile(IO.Path.Combine(IO.Directory.GetStartupDirectory(), "data", "subsystems", "run", "startup", appName + ".bs"));
}


function SaveToOutput(project)
{
	function SaveToOutput(src)
	{
		let buildInfo = project.GetSetting("BuildInfo");
		Console.WriteLine($"Output: {buildInfo.OutputFile}");
		IO.Directory.CreateDirectory(IO.Path.GetDirectoryName(IO.Path.GetFullPath(buildInfo.OutputFile)));
		IO.File.WriteAllText(buildInfo.OutputFile, src);
		return src;
	}

	return SaveToOutput;
}

function Minify(src)
{
	let reader = new SourceReader(src);

	let newSrc = reader.StripComments();

	newSrc = newSrc.Replace("\n", " ")
					.Replace("\r", " ")
					.Replace("\t", " ");

	let parts = newSrc.Split(" ", true);
	newSrc = "";
	foreach(part in parts)
	{
		newSrc += part + " ";
	}

	return newSrc.Trim();
}

function GetElement(obj!, parts!, index?)
{
	index ??= 0;
	Assert.IsArray(parts);
	Assert.IsNumber(index);
	if(index < parts.Length - 1)
	{
		return GetElement(obj[parts[index]], parts, index + 1);
	}

	return obj[parts[index]];	
}

function ProcessEvals(builder)
{

	function ProcessEvals(src)
	{
		let reader = new SourceReader(src);
		let newSrc = "";
		//Start key can not be put into a single string.
		//Because the Project Builds itself and will fail because it has no closing bracket
		let startKey = "$" + "(";
		while(!reader.IsEOF())
		{
			if(reader.Is(startKey))
			{
				reader.Eat(startKey);
				reader.SkipWhiteSpace();
				let parts = [];
				let current = "";
				while(!reader.IsEOF() && !reader.Is(")"))
				{
					if(reader.Is("."))
					{
						parts.Add(current);
						current = "";
					}
					else
					{
						current += reader.GetCurrent();
					}
					
					reader.MoveNext();
				}
				parts.Add(current);
				reader.Eat(")");

				let elem = GetElement(builder.GetSettings(), parts);
				Console.WriteLine($"Evaluated to: {elem}");
				newSrc += elem;
			}
			else
			{				
				newSrc += reader.GetCurrent();
				reader.MoveNext();
			}
		}
		return newSrc;
	}

	return ProcessEvals;

}

function RunFrom(file)
{
	function RunFrom()
	{
		let dir = IO.Path.GetDirectoryName(file);
		let original = IO.Directory.GetCurrentDirectory();
		IO.Directory.SetCurrentDirectory(dir);
		let name = IO.Path.GetFileName(file);

		Console.WriteLine("Running File: " + file);

		Runtime.Evaluate(IO.File.ReadAllText(name), file);

		IO.Directory.SetCurrentDirectory(original);
	}

	return RunFrom;
}

function ProcessImports(src)
{
	let reader = new SourceReader(src);
	let newSrc = "";
	let imports = [];
	while(!reader.IsEOF())
	{
		if(reader.Is("\""))
		{
			newSrc += reader.ReadString();
		}
		else if(reader.Is("/") && reader.GetCurrent(1) == "/")
		{
			newSrc += reader.ReadComment();
		}
		else if(reader.Is("/") && reader.GetCurrent(1) == "*")
		{
			newSrc += reader.ReadMultilineComment();
		}
		else if(reader.Is("#import"))
		{
			reader.Eat("#import");
			reader.SkipWhiteSpace();
			let importName = reader.ParseWord();
			let defineVar = !imports.Contains(importName);

			reader.SkipWhiteSpace();
			reader.Eat("from");
			reader.SkipWhiteSpace();
			let importer = reader.ParseWord();
			let insert = $"function(){{{importName} = {importer}.Import(\"{importName}\");}}();";
			if(defineVar)
			{
				imports.Add(importName);
				insert = $"let {importName};" + insert;
			}
			Console.WriteLine($"Processing import '{importName}' from '{importer}'");
			newSrc += insert;
		}
		else
		{				
			newSrc += reader.GetCurrent();
			reader.MoveNext();
		}
	}
	return newSrc;
}

Runtime.Export("ProjectUtils", {
	SaveToFile: SaveToFile,
	SaveToOutput: SaveToOutput,
	Minify: Minify,
	InstallToLib: InstallToLib,
	InstallToStartup: InstallToStartup,
	InstallToRun: InstallToRun,
	ProcessImports: ProcessImports,
	ProcessEvals: ProcessEvals,
	RunFrom: RunFrom
});
