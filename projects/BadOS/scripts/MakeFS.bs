

Console.WriteLine("[MAKEFS] Creating File System Structure...");
const outDir = "bin/fs";
IO.Directory.CreateDirectory(outDir);

function Copy(from, to)
{
	Console.WriteLine($"[MAKEFS:COPY] Copy File '{to.Replace("\\", "/")}'");
	IO.File.Copy(from, outDir + to);
}

function MakeDir(dir)
{
	Console.WriteLine($"[MAKEFS:STRUCTURE] Creating Directory '{dir.Replace("\\", "/")}'...");
	IO.Directory.CreateDirectory(outDir+dir);
}

MakeDir("/bin");
MakeDir("/lib");
MakeDir("/home/bin");
MakeDir("/home/config");
MakeDir("/os");
MakeDir("/os/modules");

Console.WriteLine("[MAKEFS:COPY] Copying BIOS/OS");
Copy("./BIOS/bin/BadOS_BIOS.bs", "/startup.bs");
Copy("./OS/bin/BadOS.bs", "/os/init.bs");

Console.WriteLine("[MAKEFS:COPY] Copying OS-Modules");
foreach(moduleDir in IO.Directory.GetDirectories("./MODULES", false))
{
	const inputFile = IO.Path.Combine(moduleDir, "bin", IO.Path.GetFileName(moduleDir) + ".bs");
	const outputFile = IO.Path.Combine("/os/modules", IO.Path.GetFileName(moduleDir) + ".bs");
	Copy(inputFile, outputFile);
}

Console.WriteLine("[MAKEFS:COPY] Copying Libs");
foreach(libDir in IO.Directory.GetDirectories("./LIBS", false))
{
	const inputFile = IO.Path.Combine(libDir, "bin", IO.Path.GetFileName(libDir) + ".bs");
	const outputFile = IO.Path.Combine("/lib", IO.Path.GetFileName(libDir) + ".bs");
	Copy(inputFile, outputFile);
}

Copy("../System/bin/System.bs", "/lib/System.bs");
Copy("../BuildSystem/bin/BuildSystem.bs", "/lib/BuildSystem.bs");


Console.WriteLine("[MAKEFS:COPY] Copying OS-Utils");
foreach(binDir in IO.Directory.GetDirectories("./UTILS", false))
{
	const inputFile = IO.Path.Combine(binDir, "bin", IO.Path.GetFileName(binDir) + ".bs");
	const outputFile = IO.Path.Combine("/bin", IO.Path.GetFileName(binDir) + ".bs");
	Copy(inputFile, outputFile);
}
Copy("../BuildSystem.Console/bin/build.bs", "/bin/build.bs");

const envData = {
	PATH: "/bin;/home/bin",
	OS_NAME: "BadOS",
	OS_VERSION: "0.1"
}

const envDataPath = "/home/config/env.json";
Console.WriteLine($"[MAKEFS:WRITEENV] Writing ENV Data to '{envDataPath}'");
IO.File.WriteAllText(outDir+envDataPath, Json.ToJson(envData));

const buildTimestamp = Runtime.GetTimeNow();
const startupData = {
	Files: [
		"/bin/login.bs",
		"/bin/shell.bs"
	],
	MOTD: $"{envData.OS_NAME}@{envData.OS_VERSION}\nThis is a '{Context.StartTarget}' build created on the {buildTimestamp.Day}.{buildTimestamp.Month}.{buildTimestamp.Year} at {buildTimestamp.Hour}:{buildTimestamp.Minute}:{buildTimestamp.Second}\n\n\tThis software is provided as is!\n"
}
const startupDataPath = "/os/startup.json";

Console.WriteLine($"[MAKEFS:WRITESTARTUP] Writing Startup Data to '{startupDataPath}'");
IO.File.WriteAllText(outDir+startupDataPath, Json.ToJson(startupData));

Console.WriteLine("[MAKEFS:COMPRESS] Creating File System ...");
Compression.Zip.FromDirectory(outDir, "bin/root.zip");


Console.WriteLine("[MAKEFS:CLEAN] Removing Temp Files");
IO.Directory.Delete(outDir, true);


