
const System = OS.Import("System");
class Shell
{
	let _ShouldExit = false;

	function FindFile(string name)
	{
		if(OS.FileSystem.File.Exists(name))
		{
			return name;
		}
		if(OS.Environment.Has("PATH"))
		{
			const pathData = OS.Environment.Get("PATH");
			const paths = pathData.Split(";");
			foreach(path in paths)
			{
				if(path == "")
				{
					continue;
				}

				const r = OS.FileSystem.Path.Combine(path, name+".bs");
				if(OS.FileSystem.File.Exists(r))
				{
					return r;
				}
			}
		}
		return null;
	}

	function Loop()
	{
		while(!_ShouldExit)
		{
			OS.Write($"{OS.User.GetUserName()}@{OS.Environment.Get("OS_NAME")}:{OS.FileSystem.Directory.GetCurrentDirectory()}$");
			const result = (await OS.ReadLineAsync()).Trim();
			if(result.Length == 0)
			{
				continue;
			}
			const parts = result.Split(" ");
			if(parts.Length == 0)
			{
				continue;
			}

			if(parts[0] == "exit")
			{
				break;
			}

			const file = FindFile(parts[0]);
			
			if(file == null)
			{
				OS.WriteLine($"Invalid Command '{parts[0]}'");
				continue;
			}
			await OS.Process.Create(file, parts).Awaitable;
		}
	}
}


OS.Export("Shell", Shell);