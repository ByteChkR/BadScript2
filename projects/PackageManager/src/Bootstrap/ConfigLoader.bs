const Config = {}

function() 
{
	const appDataDirectory = IO.Path.Combine(Json.Settings.Subsystems.Run.AppDataDirectory, "$(AppInfo.Name)");
	const originListDirectory = IO.Path.Combine(appDataDirectory, "origins");
	const originFile = IO.Path.Combine(appDataDirectory, "origins.json");
	const packageFile = IO.Path.Combine(appDataDirectory, "package.json");

	//Ensure Data Directory Exists
	IO.Directory.CreateDirectory(appDataDirectory);
	IO.Directory.CreateDirectory(originListDirectory);

	function SavePackageFile(packages)
	{
		IO.File.WriteAllText(packageFile, Json.ToJson(packages));
	}

	function LoadPackageFile()
	{
		let package = {}
		if(IO.File.Exists(packageFile))
		{
			package = Json.FromJson(IO.File.ReadAllText(packageFile));
		}
		else
		{
			IO.File.WriteAllText(packageFile, Json.ToJson(package));
		}

		return package;
	}

	function SaveOriginsFile(origins)
	{
		IO.File.WriteAllText(originFile, Json.ToJson(origins));
	}

	function LoadOriginsFile()
	{
		let origins = {}
		if(IO.File.Exists(originFile))
		{
			origins = Json.FromJson(IO.File.ReadAllText(originFile));
		}
		else
		{
			IO.File.WriteAllText(originFile, Json.ToJson(origins));
		}
		
		return origins;
	}

	class OriginList
	{
		const _origins;
		function OriginList(origins)
		{
			_origins = origins;
		}

		function GetOrigins() => _origins;

		function Has(name) => Get(name) != null;

		function Get(name)
		{
			if(name in _origins)
			{
				return _origins[name];
			}
			return null;
		}

		function Add(name, url, type)
		{
			if(Has(name))
			{
				throw $"Origin with name {name} already exists!";
			}

			_origins[name] = {Url: url, Type: type}
			SaveOriginsFile(_origins);
		}

		function Remove(name)
		{
			const origin = Get(name);
			const packageList = GetPackageListPath(name);
			if(IO.File.Exists(packageList))
			{
				IO.File.Delete(packageList);
			}
			_origins.RemoveKey(name);
			SaveOriginsFile(_origins);
		}

		function GetPackageListPath(name) => IO.Path.Combine(originListDirectory, name) + ".json";

		function CreateSearchContext(packageName)
		{
			foreach(originName in _origins.Keys)
			{
				const packageListPath = GetPackageListPath(originName);
				if(IO.File.Exists(packageListPath))
				{
					const searchContext = new PackageSearchContext(Json.FromJson(IO.File.ReadAllText(packageListPath)), originName);
					if(searchContext.Has(packageName))
					{
						return searchContext;
					}
				}
			}
			return null;
		}
	}

	class PackageSearchContext
	{
		const _packages;
		const _originName;
		function PackageSearchContext(packages, originName)
		{
			_originName = originName;
			_packages = packages;
		}
		function GetOrigin() => _originName;
		function Has(name) => Get(name) != null;
		function Get(name)
		{
			if(name in _packages)
			{
				return _packages[name];
			}
			return null;
		}

		function IsTagAlias(package, tag)
		{
			if(!(tag in package.Tags))
			{
				throw $"Tag {tag} does not exist!";
			}

			return Runtime.Native.IsString(package.Tags[tag]);
		}

		function ResolveTag(package, tag)
		{
			let result = tag;
			while(IsTagAlias(package, result))
			{
				result = package.Tags[result];
			}

			return result;
		}

		function BuildInstallList(name, tag?, deps?, parent?)
		{
			const package = Get(name);
			if(package == null)
			{
				throw $"Package with the name {name} does not exist";
			}

			tag = ResolveTag(package, tag ?? "latest");
			deps ??= [];

			const existing = deps.FirstOrDefault(x => x.Name == name && x.Tag == tag);
			if(existing != null)
			{
				if(parent != null)
				{
					existing.DependentOf.Add({Name: parent.Name, Tag: parent.Tag});
				}
				return deps;
			}
			const installEntry = {Name: name, Tag: tag, Type: package.Type, DependentOf: [], Dependencies: []}
			deps.Add(installEntry);

			if(parent != null)
			{
				installEntry.DependentOf.Add({Name: parent.Name, Tag: parent.Tag});
			}

			const tagData = package.Tags[tag];

			if("Dependencies" in tagData)
			{
				foreach(dep in tagData.Dependencies)
				{
					installEntry.Dependencies.Add({Name: dep.Name, Tag: ResolveTag(Get(dep.Name), dep.Tag)});
					BuildInstallList(dep.Name, dep.Tag, deps, installEntry);
				}
			}

			return deps;
		}
	}

	class PackageList
	{
		const _packages;
		function PackageList(packages)
		{
			_packages = packages;
		}


		function GetPackages() => _packages;

		function Has(name, tag) => Get(name, tag) != null;

		function Get(name, tag)
		{
			if(name in _packages)
			{
				const package = _packages[name];
				if(tag in package.Tags)
				{
					return package.Tags[tag];
				}
			}
			return null;
		}

		function Add(name, type, tag, origin, dependentOf, dependencies)
		{
			const existing = Get(name, tag);
			if(type == "Library" && existing != null)
			{
				foreach(dependent in dependentOf)
				{
					if(existing.DependentOf.All(x => x.Name != dependent.Name && x.Tag != dependent.Tag))
					{
						existing.DependentOf.Add(dependent);
					}
				}
				
				SavePackageFile(_packages);
				return;
			}

			if(type != "Library" || !(name in _packages))
			{
				_packages[name] = {Tags: {}, Type: type}
			}

			_packages[name].Tags[tag] = {Origin: origin, DependentOf: dependentOf, Dependencies: dependencies}

			SavePackageFile(_packages);
		}

	}

	function GetPackageInstallPath(packageType, packageName, packageTag)
	{
		if(packageType == "App")
		{
			return IO.Path.Combine(Json.Settings.Subsystems.Run.AppDirectory, $"{packageName}.bs");
		}
		if(packageType == "Library")
		{
			return IO.Path.Combine(Json.Settings.Subsystems.Run.LibraryDirectory, $"{packageName}@{packageTag}.bs");
		}

		throw $"Unknown Package Type: {packageType}";
	}

	Config.Packages = new PackageList(LoadPackageFile());
	Config.Origins = new OriginList(LoadOriginsFile());
	Config.GetPackageInstallPath = GetPackageInstallPath;
}();