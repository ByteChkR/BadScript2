

function()
{

	function RemoveFromDependents(package, name, tag)
	{
		package.DependentOf = package.DependentOf.Where(x=>x.Name != name && x.Tag != tag).ToArray();
		Config.Packages.Save();
	}
	function InnerRemovePackage(name, tag)
	{
		const package = Config.Packages.Get(name, tag);
		//1. Check if the package can be safely removed
		//	a. The Package needs to have no dependents
		if(package.DependentOf.Length != 0)
		{
			Console.WriteLine($"Can not remove package: {name}@{tag} because it is a dependency of:");
			foreach(dep in package.DependentOf)
			{
				Console.WriteLine($"\t- {dep.Name}@{dep.Tag}");
			}
			return;
		}

		//2. Remove Dependencies
		//	a. Remove this package from the dependents of the dependencies
		//	b. If dependency has dependent other than the parent package, leave the package installed
		foreach(dep in package.Dependencies)
		{
			const depPackage = Config.Packages.Get(dep.Name, dep.Tag);
			RemoveFromDependents(depPackage, name, tag);
			if(depPackage.DependentOf.Length == 0)
			{
				InnerRemovePackage(dep.Name, dep.Tag);
			}
		}
		//3. Remove Actual Package
		Console.WriteLine($"Removing Package {name}@{tag}");
		IO.File.Delete(Config.GetPackageInstallPath(Config.Packages.GetAll(name).Type, name, tag));
		Config.Packages.Remove(name, tag);
	}

	function RemovePackage(args)
	{
		foreach(package in args)
		{
			if(package.Contains("@"))
			{
				const parts = package.Split("@");
				InnerRemovePackage(parts[0], parts[1]);
			}
			else
			{
				//Get All Tags
				const p = Config.Packages.GetAll(package);
				if(p == null)
				{
					Console.WriteLine($"Package with name '{package}' could not be found!");
				}
				else
				{
					foreach(tag in p.Tags.Keys)
					{
						InnerRemovePackage(package, tag);
					}
				}
			}
		}
	}

	function RemoveOrigin(args)
	{
		if(args.Length != 1)
		{
			Console.WriteLine("Invalid Argument Count. Expected pm remove origin <name>");
		}

		const name = args[0];
		
		Config.Origins.Remove(name);
	}

	function Remove(args)
	{
		if(args.Length == 0)
		{
			Console.WriteLine("Invalid Argument Count. Expected 'package' or 'origin' as argument");
			return;
		}

		const type = args[0];
		if(type == "package")
		{
			RemovePackage(args.Skip(1).ToArray());
		}
		else if(type == "origin")
		{
			RemoveOrigin(args.Skip(1).ToArray());
		}
		else
		{
			Console.WriteLine($"Invalid Argument. Expected 'package' or 'origin' as argument but got '{type}'");
			return;
		}
	}

	Commands.Add("remove", Remove, "Removes Packages or Origins");
	PackageApi.Remove = InnerRemovePackage;
}();