function()
{

	function UpdateOriginLocal(name, origin)
	{
		Console.WriteLine($"Updating Origin: {origin.Type} {name}: {origin.Url}");
		const packagePath = IO.Path.Combine(origin.Url, "packages.json");
		const localPackagePath = Config.Origins.GetPackageListPath(name);

		if(!IO.File.Exists(packagePath))
		{
			throw $"Could not Update Origin {name}: Package File does not exist.";
		}

		if(IO.File.Exists(localPackagePath))
		{
			IO.File.Delete(localPackagePath);
		}

		IO.File.Copy(packagePath, localPackagePath);
	}

	function UpdateOriginRemote(name, origin)
	{
		Console.WriteLine($"Updating Origin: {origin.Type} {name}: {origin.Url}");
		const localPackagePath = Config.Origins.GetPackageListPath(name);

		const packagePath = $"{origin.Url}/packages.json";
		const response = await Net.Get(packagePath);
		const content = await response.Content.ReadAsString();
		if(IO.File.Exists(localPackagePath))
		{
			IO.File.Delete(localPackagePath);
		}

		IO.File.WriteAllText(localPackagePath, content);	
	}

	function UpdateOrigin(name, origin)
	{
		if(origin.Type == "local")
		{
			UpdateOriginLocal(name, origin);
		}
		else if(origin.Type == "remote")
		{
			UpdateOriginRemote(name, origin);
		}
		else
		{
			throw $"Unknown Origin Type: {origin.Type}";
		}
	}

	function Update(args)
	{
		if(args.Length != 0)
		{
			foreach(originName in args)
			{
				const origin = Config.Origins.Get(originName);
				if(origin == null)
				{
					throw $"Origin with name {originName} does not exist";
				}

				UpdateOrigin(originName, origin);
			}
		}
		else
		{
			const origins = Config.Origins.GetOrigins();
			foreach(originName in origins.Keys)
			{
				UpdateOrigin(originName, origins[originName]);
			}
		}
	}
	

	Commands.Add("update", Update, "Fetches the Package Listing from the origins");
}();