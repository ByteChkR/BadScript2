
let LIB_DIR;
if(Runtime.IsApiRegistered("Json"))
{
	LIB_DIR = Json.Settings?.Subsystems?.Run?.LibraryDirectory;
}

if(LIB_DIR == null)
{
	//Fallback Location in case settings are not exposed to the Runtime
	LIB_DIR = IO.Path.Combine(IO.Directory.GetStartupDirectory(), "data", "subsystems", "run", "libs");
}


class LibraryImportHandler : IImportHandler
{
	function string GetPath(string path!)
	{
		let p = path.Substring(1, path.Length - 2);
		if(!p.EndsWith(".bs"))
		{
			p += ".bs";
		}

		return p;
	}

	function string GetHash(string path!) => $"lib://{GetPath(path)}";

	function bool Has(string path!) => path.StartsWith("<") && path.EndsWith(">");

	function any Get(string path!)
	{
		const p = IO.Path.Combine(LIB_DIR, GetPath(path));

		const exports = await Runtime.EvaluateAsync(IO.File.ReadAllText(p), p, true);

		return exports;
	}
}

Runtime.RegisterImportHandler(new LibraryImportHandler());
