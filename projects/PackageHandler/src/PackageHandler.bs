

const libDir = IO.Path.Combine(IO.Directory.GetStartupDirectory(), "data", "subsystems", "run", "libs");

const libLoaders = {}
libLoaders[".bs"] = function(file) => IO.File.ReadAllText(file);
libLoaders[".defl"] = function(file) => Compression.Deflate.Decompress(IO.File.ReadAllBytes(file));
libLoaders[".gzip"] = function(file) => Compression.GZip.Decompress(IO.File.ReadAllBytes(file));
libLoaders[".zlib"] = function(file) => Compression.ZLib.Decompress(IO.File.ReadAllBytes(file));

function GetLibLoader(file)
{
	const ext = IO.Path.GetExtension(file);
	if(!libLoaders.Keys.Contains(ext))
	{
		throw $"Can not find Loader for {file}";
	}
	return libLoaders[ext];
}


function FindFile(packageName!)
{
	let files = IO.Directory.GetFiles(libDir, ".bs", true);
	foreach(file in files)
	{
		let name = IO.Path.GetFileNameWithoutExtension(file);
		if(name == packageName)
		{
			return file;
		}
	}

	return null;
}

function Import(str!)
{

	let name = str;
	if(str.Contains("@"))
	{
		name = str.Split("@")[0];
	}

	if(!Runtime.HasPackage(name))
	{
		let file = FindFile(str);
		Console.WriteLine($"Loading package '{str}' from '{file}'");
		if(file == null)
		{
			throw $"Can not find Package with name '{str}'";
		}
		//Run file


		let src = GetLibLoader(file)(file);
		Runtime.Evaluate(src, file);
	}

	return Runtime.Import(name);
}


Runtime.Export("Package", {Import: Import});
