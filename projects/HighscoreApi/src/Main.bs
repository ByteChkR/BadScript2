
#import Package from Runtime
#import WebFramework@latest from Package

@|
	Stores highscores by name in memory
|@
class HighscoreDatabase
{
	const highscores = {}

	@|
		Adds a score
		|PARAM name string: The Name of the User
		|PARAM score num: The Score
	|@
	function AddScore(string name!, num score!)
	{
		if(!highscores.Keys.Contains(name) || highscores[name] < score)
		{
			highscores[name] = score;
		}
	}

	@|
		Gets the high score of a specified user
		|PARAM name string: The Name of the User
		|RET num: The Highscore (0 if no highscore was set)
	|@
	function GetScore(string name!)
	{
		if(highscores.Keys.Contains(name))
		{
			return highscores[name];
		}
		return 0;
	}

	@|
		Returns a table of scores with the user name as key.
		|RET Table: The Highscore Table
	|@
	function GetScores() => highscores;
}

@|
	Defines the Highscore API using the WebFramework Library
|@
class HighscoreApi
{
	const API_KEY;
	const app;
	const highscores = new HighscoreDatabase();
	@|
		Constructs a new Highscore API
		|PARAM prefix any: the prefix for the http listener.
		|PARAM apiKey string: the api key that is used to authenticate with the server.
	|@
	function HighscoreApi(prefix, apiKey)
	{
		API_KEY = apiKey;
		app = new WebFramework(prefix);
		app.MapExact("/get", GetScore);
		app.MapExact("/set", SetScore);
		app.MapExact("/list", ListScores);
	}

	@|
		Helper Function. Terminates a Connection with an error code and a message.
		|PARAM ctx any: The Http Context
		|PARAM code num: The Http Status Code.
		|PARAM msg string: the error message
		|RET void:
	|@
	function Error(ctx, num code, string msg)
	{
		ctx.Response.SetStatusCode(code);
		ctx.Response.SetContent(msg);
		ctx.Response.SetHeader("Access-Control-Allow-Origin", "*");
		ctx.Response.Close();
	}

	@|
		Starts the API Listener
		|RET void:
	|@
	function Start()
	{
		app.Start();
	}

	@|
		Implements the 'GET /get?key=<API_KEY>&name=<user_name>' endpoint
		Returns the Score for a specific user.
		|PARAM ctx any: The Http Context
		|RET void:
	|@
	function GetScore(ctx)
	{
		const request = ctx.Request;
		const query = request.QueryString;
		if(request.HttpMethod != "GET")
		{
			Error(ctx, 400, "Invalid HTTP Method: " + request.HttpMethod);
		}
		else if(!query.Keys.Contains("key") || query["key"] != API_KEY)
		{
			Error(ctx, 401, "Invalid API Key");
		}
		else if(!query.Keys.Contains("name") || query["name"] == "")
		{
			Error(ctx, 400, "Invalid Request. Missing 'name'");
		}
		else
		{
			const response = ctx.Response;
			response.SetStatusCode(200);
			response.SetHeader("Access-Control-Allow-Origin", "*");
			const name = query["name"];
			const score = highscores.GetScore(name);
			Console.WriteLine($"/get: {name} : {score.ToString()}");
			response.SetContent(score.ToString());
			response.Close();
		}
	}

	@|
		Implements the 'POST /set?key=<API_KEY>' endpoint
		Sets the Score for a specific user.
		|PARAM ctx any: The Http Context
		|RET void:
	|@
	function SetScore(ctx)
	{
		const request = ctx.Request;
		const query = request.QueryString;
		if(request.HttpMethod != "POST")
		{
			Error(ctx, 400, "Invalid HTTP Method: " + request.HttpMethod);
		}
		else if(!query.Keys.Contains("key") || query["key"] != API_KEY)
		{
			Error(ctx, 401, "Invalid API Key");
		}
		else
		{
			try
			{
				const str = Net.DecodeUriComponent(request.Content.AsString());
				const body = Json.FromJson(str);
				if(!Runtime.Native.IsTable(body) || 
					!body.Keys.Contains("name") || 
					!body.Keys.Contains("score") || 
					!Runtime.Native.IsString(body.name) || 
					!Runtime.Native.IsNumber(body.score))
				{
					throw "Invalid Json Body";
				}
				else
				{
					const response = ctx.Response;
					Console.WriteLine($"/set: {body.name} : {body.score}");
					highscores.AddScore(body.name, body.score);
					response.SetHeader("Access-Control-Allow-Origin", "*");
					response.SetStatusCode(200);
					response.SetContent("Success");
					response.Close();
				}
			}
			catch(e)
			{
				Error(ctx, 400, e.ErrorObject);
			}
		}
	}

	@|
		Implements the 'GET /list?key=<API_KEY>' endpoint
		Returns scores for all users.
		|PARAM ctx any: The Http Context
		|RET void:
	|@
	function ListScores(ctx)
	{
		const request = ctx.Request;
		const query = request.QueryString;
		if(request.HttpMethod != "GET")
		{
			Error(ctx, 400, "Invalid HTTP Method: " + request.HttpMethod);
		}
		else if(!query.Keys.Contains("key") || query["key"] != API_KEY)
		{
			Error(ctx, 401, "Invalid API Key");
		}
		else
		{
			const response = ctx.Response;
			response.SetStatusCode(200);
			const content = Json.ToJson(highscores.GetScores());
			response.SetHeader("Access-Control-Allow-Origin", "*");
			Console.WriteLine($"/list: {content}");
			response.SetContent(content);
			response.Close();
		}
	}
}

Runtime.Export("HighscoreApi", HighscoreApi);
