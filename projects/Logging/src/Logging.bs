import Event from '<Event>';

@|
	A simple Logger class with OnLog and OnWarn Events
|@
export class Logger
{
	const Event OnLog;
	const Event OnWarn;

	@|
		Logger Constructor
	|@
	function Logger()
	{
		OnLog = new Event(function(msg) {});
		OnWarn = new Event(function(msg) {});
	}

	@|
		Logs a message
		|PARAM msg any: Object that will be logged.
		|RET void:
	|@
	function Log(msg)
	{
		OnLog.Invoke(msg);
	}

	@|
		Logs a warning
		|PARAM msg any: Object that will be logged.
		|RET void:
	|@
	function Warn(msg)
	{
		OnWarn.Invoke(msg);
	}
}

@|
	A simple Logger class that supports adding a tag to every log written.
|@
export class TagLogger : Logger
{

	let string LogTag = "[LOG]";
	let string WarnTag = "[WARN]";

	@|
		Logger Constructor
	|@
	function TagLogger()
	{
		base.Logger();
	}

	@|
		Logs a message
		|PARAM msg any: Message to Log
		|RET void:
	|@
	function Log(msg)
	{
		base.Log($"{LogTag} {msg}");
	}

	@|
		Logs a warning
		|PARAM msg any: Warning to Log
		|RET void:
	|@
	function Warn(msg)
	{
		base.Warn($"{WarnTag} {msg}");
	}
}

@|
	Creates a Default Logger hooked up to the Console Output
	|RET System.Logging.Logger: Default Logger Instance
|@
export function Logger CreateDefault()
{
	let l = new Logger();
	l.OnLog += Console.WriteLine;
	l.OnWarn += Console.WriteLine;
	return l;
}

