const args = Runtime.GetArguments();

function FindNode(n, name)
{
	foreach(node in n)
	{
		if(node.Name == name)
		{
			return node;
		}
	}
}

function ApplyVersion(csProjFile, changeStr)
{
	Console.WriteLine($"Applying Version Change for {IO.Path.GetFileNameWithoutExtension(csProjFile)}");
	

	const doc = Xml.Load(IO.File.ReadAllText(csProjFile));
	const proj = FindNode(doc, "Project");
	if(proj == null)
	{
		Console.WriteLine("Can not Find Project Node");
		return;
	}
	const propGroup = FindNode(proj, "PropertyGroup");
	if(propGroup == null)
	{
		Console.WriteLine("Can not Find PropertyGroup Node");
		return;
	}
	const asmVerNode = FindNode(propGroup, "AssemblyVersion");
	const fileVerNode = FindNode(propGroup, "FileVersion");
	if(asmVerNode == null)
	{
		Console.WriteLine("Can not Find AssemblyVersion Node");
		asmVerNode = doc.CreateElement("AssemblyVersion");
		asmVerNode.InnerText = "1.0.0.0";
		propGroup.AppendChild(asmVerNode);
	}
	if(fileVerNode == null)
	{
		Console.WriteLine("Can not Find FileVersion Node");
		fileVerNode = doc.CreateElement("FileVersion");
		fileVerNode.InnerText = "1.0.0.0";
		propGroup.AppendChild(fileVerNode);
	}

	const asmVer = new Version(asmVerNode.InnerText);
	const fileVer = new Version(fileVerNode.InnerText);

	const newAsmVer = asmVer.ChangeVersion(changeStr);
	const newFileVer = fileVer.ChangeVersion(changeStr);

	Console.WriteLine($"ASM {asmVer} => {newAsmVer}");
	Console.WriteLine($"FILE {fileVer} => {newFileVer}");

	asmVerNode.InnerText = newAsmVer.ToString();
	fileVerNode.InnerText = newFileVer.ToString();

	doc.Save(csProjFile);
}

function Main()
{
	if(args.Length == 0)
	{
		Console.WriteLine("Invalid Argument Count");
		return;
	}

	if(args.Length == 1)
	{
		//For Each .csproj file inside this directory	
		foreach(csProjFile in IO.Directory.GetFiles("./", ".csproj", true))
		{
			ApplyVersion(csProjFile, args[0]);
		}
		return;
	}


	foreach(csProjFile in args.Skip(1))
	{
		ApplyVersion(csProjFile, args[0]);
	}

	
}

Main();