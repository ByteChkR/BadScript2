

class LinqHelper
{
	function Any(e!, func!)
	{
		foreach(v in e)
		{
			if(func(v))
			{
				return true;
			}
		}
		return false;
	}

	function All(e!, func!)
	{
		foreach(v in e)
		{
			if(!func(v))
			{
				return false;
			}
		}
		return true;
	}

	function FirstOrDefault(e!, func!)
	{
		foreach(v in e)
		{
			if(func(v))
			{
				return v;
			}
		}
		return null;
	}

	function First(e!, func!)
	{
		let v = FirstOrDefault(e, func);
		if(v == null)
		{
			throw "Sequence contains no matching element";
		}
		return v;
	}

	function LastOrDefault(e!, func!)
	{
		let r = null;
		foreach(v in e)
		{
			if(func(v))
			{
				r = v;
			}
		}
		return r;
	}

	function Last(e!, func!)
	{
		let v = LastOrDefault(e, func);
		if(v == null)
		{
			throw "Sequence contains no matching element";
		}
		return v;
	}

	function ToArray(e!)
	{
		let r = [];
		foreach(v in e)
		{
			r.Add(v);
		}
		return r;
	}
}

let helper = new LinqHelper();

class LinqEnumerable
{
	function GetEnumerator() => throw "GetEnumerator is not implemented";
	function Select(func!) => new SelectEnumerable(this, func);
	function Where(func!) => new WhereEnumerable(this, func);
	function Take(count!) => new TakeEnumerable(this, count);
	function Skip(count!) => new SkipEnumerable(this, count);
	
	function Any(func!) => helper.Any(this, func);
	function All(func!) => helper.All(this, func);
	function FirstOrDefault(func!) => helper.FirstOrDefault(this, func);
	function First(func!) => helper.First(this, func);
	function LastOrDefault(func!) => helper.LastOrDefault(this, func);
	function Last(func!) => helper.Last(this, func);
	function ToArray() => helper.ToArray(this);
}


class ArrayEnumerable : LinqEnumerable
{
	let _inner;
	function ArrayEnumerable(inner!)
	{
		Assert.IsArray(inner);
		_inner = inner;
	}

	function GetEnumerator() => _inner.GetEnumerator();
}

class LinqEnumerator
{
	function GetCurrent() => throw "GetCurrent is not implemented";
	function MoveNext() => throw "MoveNext is not implemented";
}


class TableEnumerator : LinqEnumerator
{
	let _inner;
	let _keys;
	function TableEnumerator(inner!)
	{
		Assert.IsTable(inner);
		_inner = inner;
		_keys = inner.Keys.GetEnumerator();
	}

	function GetCurrent()
	{
		let key = _keys.GetCurrent();
		return {key: key, value: _inner[key]}
	}

	function MoveNext() => _keys.MoveNext();
}

class TableEnumerable : LinqEnumerable
{
	let _inner;
	function TableEnumerable(inner!)
	{
		Assert.IsTable(inner);
		_inner = inner;
	}

	function GetEnumerator() => new TableEnumerator(_inner);
}

class SelectEnumerator : LinqEnumerator
{
	let _selector;
	let _inner;
	function SelectEnumerator(inner!, selector!)
	{
		Assert.IsEnumerator(inner);
		Assert.IsFunction(selector);
		_inner = inner;
		_selector = selector;
	}

	function GetCurrent() => _selector(_inner.GetCurrent());
	function MoveNext() => _inner.MoveNext();
}

class SelectEnumerable : LinqEnumerable
{
	let _selector;
	let _inner;
	function SelectEnumerable(inner!, selector!)
	{
		Assert.IsFunction(selector);
		Assert.IsEnumerable(inner);
		_selector = selector;
		_inner = inner;
	}

	function GetEnumerator() => new SelectEnumerator(_inner.GetEnumerator(), _selector);
}

class WhereEnumerator : LinqEnumerator
{
	let _inner;
	let _filter;
	function WhereEnumerator(inner!, filter!)
	{
		Assert.IsEnumerator(inner);
		Assert.IsFunction(filter);
		_inner = inner;
		_filter = filter;
	}

	function GetCurrent() => _inner.GetCurrent();
	function MoveNext()
	{
		let r = _inner.MoveNext();
		if(!r)
		{
			return false;
		}

		while(!_filter(GetCurrent()))
		{
			r = _inner.MoveNext();
			if(!r)
			{
				return false;
			}
		}
		return true;
	}
}

class WhereEnumerable : LinqEnumerable
{
	let _inner;
	let _filter;
	function WhereEnumerable(inner!, filter!)
	{
		Assert.IsEnumerable(inner);
		Assert.IsFunction(filter);
		_inner = inner;
		_filter = filter;
	}

	function GetEnumerator() => new WhereEnumerator(_inner.GetEnumerator(), _filter);
}

class TakeEnumerator : LinqEnumerator
{
	let _inner;
	let _current;
	let _count;
	function TakeEnumerator(inner!, count!)
	{
		Assert.IsEnumerator(inner);
		Assert.IsNumber(count);
		_inner = inner;
		_count = count;
		_current = 0;
	}

	function GetCurrent() => _inner.GetCurrent();
	function MoveNext()
	{
		if(_count <= _current)
		{
			return false;
		}
		_current++;
		return _inner.MoveNext();
	}
}

class TakeEnumerable : LinqEnumerable
{
	let _inner;
	let _count;
	function TakeEnumerable(inner!, count!)
	{
		Assert.IsEnumerable(inner);
		Assert.IsNumber(count);
		_inner = inner;
		_count = count;
	}

	function GetEnumerator() => new TakeEnumerator(_inner.GetEnumerator(), _count);
}

class SkipEnumerator : LinqEnumerator
{
	let _inner;
	let _count;
	let _firstStart;
	function SkipEnumerator(inner!, count!)
	{
		Assert.IsEnumerator(inner);
		Assert.IsNumber(count);
		_inner = inner;
		_count = count;
		_firstStart = true;
	}

	function GetCurrent() => _inner.GetCurrent();
	function MoveNext()
	{
		if(_firstStart)
		{
			_firstStart = false;
			for(let i = 0; i < _count; i++)
			{
				_inner.MoveNext();
			}
		}
		return _inner.MoveNext();
	}
}


class SkipEnumerable : LinqEnumerable
{
	let _inner;
	let _count;
	function SkipEnumerable(inner!, count!)
	{
		Assert.IsEnumerable(inner);
		Assert.IsNumber(count);
		_inner = inner;
		_count = count;
	}

	function GetEnumerator() => new SkipEnumerator(_inner.GetEnumerator(), _count);
}


function FromArray(array!) => new ArrayEnumerable(array);
function FromTable(table!) => new TableEnumerable(table);


const Linq = {
	FromArray: FromArray,
	FromTable: FromTable
}
