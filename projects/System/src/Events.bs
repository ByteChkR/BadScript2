function CheckSignature(a!, b!)
{
	Assert.IsFunction(a);
	Assert.IsFunction(b);
	if(a.Parameters.Length != b.Parameters.Length)
	{
		throw $"Parameters of {a} and {b} do not match";
	}
}


@|
	An Event class that allows other code to hook into this event with the +=/-= operators.
	Invocation can be done with the () operator.
|@
class Event
{
	let _CallList;
	let _CallPrototype;
	@|
		Event Constructor
		|PARAM callProto: The Function Signature of this event.
	|@
	function Event(callProto!)
	{
		Assert.IsFunction(callProto);
		_CallList = [];
		_CallPrototype = callProto;
	}

	@|
		Removes a subscribed listener from the event
		|PARAM func: The listener to unsubscribe.
		|RET: void
	|@
	function Remove(func!)
	{
		_CallList.Remove(func);
	}

	@|
		Adds a listener to event
		|PARAM func: The listener to subscribe.
		|RET: void
	|@
	function Add(func!)
	{
		CheckSignature(_CallPrototype, func);
		_CallList.Add(func);
	}

	@|
		Invokes the Event
		|PARAM args: the parameters for the event
		|RET: void
	|@
	function Invoke(args*)
	{
		foreach(func in _CallList)
		{
			func.Invoke(args);
		}
	}


	@|
		Operator Override for '+='
		|PARAM func: The listener to subscribe.
		|RET: void
	|@
	function op_AddAssign(func!) => Add(func);

	@|
		Operator Override for '-='
		|PARAM func: The listener to unsubscribe.
		|RET: void
	|@
	function op_SubtractAssign(func!) => Remove(func);

	@|
		Operator Override for '()'
		|PARAM args: the parameters for the event
		|RET: void
	|@

	function op_Invoke(args*) => Invoke(args);

}


const Events = { Event: Event }

