
@|
	Loads Build Targets
|@
class BuildTargetLoader
{
	@|
		Resolves a String Value with the specified context.
		|PARAM context Table: The Context that the string is resolved with
		|PARAM str string: The String to be resolved
		|RET string: the resolved string
	|@
	function string ResolveString(Table context!, string str)
	{
		if(str.Contains("{") && str.Contains("}"))
		{
			const scope = new Scope("ResolveStringCtx", context);
			return await Runtime.EvaluateAsync($"$\"{str}\"", "", false, scope);
		}
		return str;
	}

	@|
		Resolves a Table with the specified context.
		|PARAM context Table: The Context that the Table is resolved with
		|PARAM table Table: The Table to be resolved
		|RET Table: the resolved string
	|@
	function Table ResolveTable(Table context!, Table table)
	{
		const t = {};
		foreach(key in table.Keys)
		{
			t[Resolve(context, key)] = Resolve(context, table[key]);
		}
		return t;
	}

	@|
		Resolves an Array with the specified context.
		|PARAM context Table: The Context that the Array is resolved with
		|PARAM array Array: The Array to be resolved
		|RET Array: the resolved Array
	|@
	function Array ResolveArray(Table context!, Array array)
	{
		for(let i = 0; i < array.Length; i++)
		{
			array[i] = Resolve(context, array[i]);
		}
		return array;
	}

	@|
		Resolves an Object with the specified context.
		|PARAM context Table: The Context that the Object is resolved with
		|PARAM obj any: The Object to be resolved
		|RET any: the resolved Object
	|@
	function any Resolve(Table context!, obj)
	{
		if(obj == null)
		{
			return obj;
		}
		if(Runtime.Native.IsTable(obj))
		{
			return ResolveTable(context, obj);
		}
		else if(Runtime.Native.IsArray(obj))
		{
			return ResolveArray(context, obj);
		}
		else if(Runtime.Native.IsString(obj))
		{
			return ResolveString(context, obj);
		}
		return obj;
	}

	@|
		Loads a build target from the specified file and resolves it with the supplied context.
		|PARAM context Table: The Context that the build target is resolved with
		|PARAM file string: The Build Target File
		|RET any: the resolved Object
	|@
	function any Load(string file!, Table context)
	{
		return Resolve(context, Json.FromJson(IO.File.ReadAllText(file)));
	}
}
