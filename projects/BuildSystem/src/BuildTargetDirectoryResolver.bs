#define FILESYSTEM_API Environment.Runtime == "Runtime" ? "IO" : "OS.FileSystem"
#define START_DIR Environment.Runtime == "Runtime" ? "IO.Directory.GetStartupDirectory()" : "\"/\""


@|
	Resolves Build Target Directories
|@
class BuildTargetDirectoryResolver
{
	
	const Path;
	const Targets = [];

	@|
		Creates a new instance of the build Target Resolver class
		|PARAM path string: The Path that contains the build target .json files
		|PARAM context any: The contex the build targets are resolved with.
	|@
	function BuildTargetDirectoryResolver(string path!, context)
	{
		Path = path;
		LoadTargets(context);
	}



	@|
		Loads all targets from the Path that was specified in the constructor.
		|PARAM context any: the context which is used to resolve the build targets
		|RET void:
	|@
	function LoadTargets(context)
	{
		Targets.Clear();
		foreach(file in $(FILESYSTEM_API).Directory.GetFiles(Path, "json", false))
		{
			const loader = new BuildTargetLoader();
			const target = new BuildTarget(loader.Load(file, context));
			if(target.Info.Keys.Contains("Script"))
			{
				target.Info.Script = target.Info.Script.Replace("$"+"(DEFAULT_TARGETSCRIPT_PATH)", IO.Path.Combine($(START_DIR), "data", "subsystems", "build", "scripts"));
				target.Info.Script = target.Info.Script.Replace("$"+"(DEFAULT_TARGET_PATH)", IO.Path.Combine($(START_DIR), "data", "subsystems", "build", "targets"));
			}
			Targets.Add(target);
		}
	}



	@|
		Resolves a build target with the specified name. returns null if no target was found.
		|PARAM name string: the build target name
		|RET any: The Build Target with the specified name.
	|@
	function any Resolve(string name!)
	{
		return Targets.FirstOrDefault(function bool FindByName(t) {return t.GetName() == name;});
	}


}
