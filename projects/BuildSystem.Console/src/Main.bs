
#define FILESYSTEM_API Environment.Runtime == "Runtime" ? "IO" : "OS.FileSystem"
#define START_DIR Environment.Runtime == "Runtime" ? "IO.Directory.GetStartupDirectory()" : "\"/\""
#define CONSOLE_API Environment.Runtime == "Runtime" ? "Console" : "OS"

#if Environment.Runtime == "Runtime"
{
	#import Package from Runtime
	#import BuildSystem from Package
}
#if Environment.Runtime == "OS"
{
	#import BuildSystem from OS
}


const args = $(Environment.Runtime).GetArguments();

const targets;
#if Environment.Runtime == "Runtime"
{
	if(args.Length == 0)
	{
		targets = ["default"];
	}
	else
	{
		targets = args;
	}
}

#if Environment.Runtime == "OS"
{
	if(args.Length <= 1)
	{
		targets = ["default"];
	}
	else
	{
		targets = args.Skip(1).ToArray();
	}
}

$(CONSOLE_API).WriteLine("Targets: " + targets);

foreach(target in targets)
{
	const bs = new BuildSystem();
	const context = {
		Builder: bs,
		DEFAULT_TARGETSCRIPT_PATH: $(FILESYSTEM_API).Path.Combine($(START_DIR), "data", "subsystems", "build", "scripts"),
		DEFAULT_TARGET_PATH: $(FILESYSTEM_API).Path.Combine($(START_DIR), "data", "subsystems", "build", "targets"),
		StartTarget: target,
		Environment: {Runtime: "$(Environment.Runtime)"}
	}
	bs.AddTargetSource("./targets", context);
	bs.AddTargetSource(context.DEFAULT_TARGET_PATH, context);
	bs.Run(target, context);
}
