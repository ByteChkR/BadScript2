

class CommandLineParser
{
	
	let Array Parameters;

	function CommandLineParser(Array parameters!)
	{
		Parameters = parameters;
	}

	function Parameter FindByName(string name)
	{
		foreach(param in Parameters)
		{
			if(param.LongName == name || param.ShortName == name)
			{
				return param;
			}
		}
		return null;
	}

	function Parameter FindByResultName(string resultName)
	{
		foreach(param in Parameters)
		{
			if(param.ResultName == resultName)
			{
				return param;
			}
		}
		return null;
	}

	function Parse(Array args)
	{
		let t = {}
		let currentKey = "DEFAULT";
		let currentArr = [];
		t[currentKey] = currentArr;
		for(let i = 0; i < args.Length; i++)
		{
			let Parameter param = FindByName(args[i]);

			if(param == null)
			{
				currentArr.Add(args[i]);
			}
			else
			{
				currentKey = param.ResultName;
				currentArr = [];
				t[currentKey] = currentArr;
			}
		}

		let Array tKeys = t.Keys;
		foreach(param in Parameters)
		{
			if(!tKeys.Contains(param.ResultName))
			{
				if(param.Required)
				{
					throw $"Missing parameter {param}.";
				}
				if(param.DefaultValue != null)
				{
					t[param.ResultName] = [param.DefaultValue];	
				}
			}
		}

		return new Command(t);
	}
}

function CreateParser(Array parameters)
{
	return new CommandLineParser(parameters);	
}

Runtime.Export("Commandline", {Parameter: Parameter, CreateParser: CreateParser});