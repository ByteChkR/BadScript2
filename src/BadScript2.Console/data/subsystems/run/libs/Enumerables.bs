let Package;function(){Package = Runtime.Import("Package");}(); let Assert;function(){Assert = Package.Import("Assert");}(); function Infinite(obj) { function GetEnumerator() { function GetCurrent() => obj; function MoveNext() => true; return { GetCurrent: GetCurrent, MoveNext: MoveNext } } return { GetEnumerator: GetEnumerator } } function Repeat(obj, num) { Assert.IsNumber(num); if(num < 0) { throw "Repeat amount can not be negative"; } function GetEnumerator() { let i = 0; function GetCurrent() => obj; function MoveNext() { i++; return i <= num; } return { GetCurrent: GetCurrent, MoveNext: MoveNext } } return { GetEnumerator: GetEnumerator } } function Range(from, to, step?) { step ??= 1; Assert.IsNumber(from); Assert.IsNumber(to); Assert.IsNumber(step); if(from > to && step >= 0) { throw "Range Step must be negative from " + from + " to " + to; } if(from < to && step <= 0) { throw "Range Step must be positive from " + from + " to " + to; } function GetEnumerator() { let current = from - step; function GetCurrent() => current; function MoveNext() { current += step; return !(from < to && current >= to) && !(from > to && current <= to); } return { GetCurrent: GetCurrent, MoveNext: MoveNext } } return { GetEnumerator: GetEnumerator } } Runtime.Export("Enumerables", { Range: Range, Repeat: Repeat, Infinite: Infinite })