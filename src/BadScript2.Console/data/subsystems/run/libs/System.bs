let Native = Runtime.Native; function IsString(obj) { if(obj == null || !Native.IsString(obj)) => throw "Expected String"; } function IsBoolean(obj) { if(obj == null || !Native.IsBoolean(obj)) => throw "Expected Boolean"; } function IsNumber(obj) { if(obj == null || !Native.IsNumber(obj)) => throw "Expected Number"; } function IsArray(obj) { if(obj == null || !Native.IsArray(obj)) => throw "Expected Array"; } function IsTable(obj) { if(obj == null || !Native.IsTable(obj)) => throw "Expected Table"; } function IsFunction(obj) { if(obj == null || !Native.IsFunction(obj)) => throw "Expected Function"; } function IsEnumerable(obj) { if(obj == null || !Native.IsEnumerable(obj)) => throw "Expected Enumerable"; } function IsEnumerator(obj) { if(obj == null || !Native.IsEnumerator(obj)) => throw "Expected Enumerator"; } const Assert = { IsString: IsString, IsBoolean: IsBoolean, IsNumber: IsNumber, IsArray: IsArray, IsTable: IsTable, IsFunction: IsFunction, IsEnumerator: IsEnumerator, IsEnumerable: IsEnumerable } function CheckSignature(a!, b!) { Assert.IsFunction(a); Assert.IsFunction(b); if(a.Parameters.Length != b.Parameters.Length) { throw $"Parameters of {a} and {b} do not match"; } } class Event { let _CallList; let _CallPrototype; function Event(callProto!) { Assert.IsFunction(callProto); _CallList = []; _CallPrototype = callProto; } function Remove(func!) { _CallList.Remove(func); } function Add(func!) { CheckSignature(_CallPrototype, func); _CallList.Add(func); } function Invoke(args*) { foreach(func in _CallList) { func.Invoke(args); } } function op_AddAssign(func!) => Add(func); function op_SubtractAssign(func!) => Remove(func); function op_Invoke(args*) => Invoke(args); } const Events = { Event: Event } class Logger { let OnLog; let OnWarn; function Logger() { OnLog = new Events.Event(function(msg) => {}); OnWarn = new Events.Event(function(msg) => {}); } function Log(msg) { OnLog.Invoke(msg); } function Warn(msg) { OnWarn.Invoke(msg); } } class TagLogger : Logger { let LogTag = "[LOG]"; let WarnTag = "[WARN]"; function TagLogger() { base.Logger(); } function Log(msg) { base.Log($"{LogTag} {msg}"); } function Warn(msg) { base.Warn($"{WarnTag} {msg}"); } } function CreateDefaultLogger() { let l = new Logger(); l.OnLog += Console.WriteLine; l.OnWarn += Console.WriteLine; return l; } const Logging = { Logger: Logger, TagLogger: TagLogger, CreateDefault: CreateDefaultLogger } function Infinite(obj) { function GetEnumerator() { function GetCurrent() => obj; function MoveNext() => true; return { GetCurrent: GetCurrent, MoveNext: MoveNext } } return { GetEnumerator: GetEnumerator } } function Repeat(obj, num) { Assert.IsNumber(num); if(num < 0) { throw "Repeat amount can not be negative"; } function GetEnumerator() { let i = 0; function GetCurrent() => obj; function MoveNext() { i++; return i <= num; } return { GetCurrent: GetCurrent, MoveNext: MoveNext } } return { GetEnumerator: GetEnumerator } } function Range(from, to, step?) { step ??= 1; Assert.IsNumber(from); Assert.IsNumber(to); Assert.IsNumber(step); if(from > to && step >= 0) { throw "Range Step must be negative from " + from + " to " + to; } if(from < to && step <= 0) { throw "Range Step must be positive from " + from + " to " + to; } function GetEnumerator() { let current = from - step; function GetCurrent() => current; function MoveNext() { current += step; return !(from < to && current >= to) && !(from > to && current <= to); } return { GetCurrent: GetCurrent, MoveNext: MoveNext } } return { GetEnumerator: GetEnumerator } } const Enumerables = { Range: Range, Repeat: Repeat, Infinite: Infinite } class SourceReader { let _src; let _current; function SourceReader(src!) { Assert.IsString(src); _src = src; _current = 0; } function Is(str!) { Assert.IsString(str); for(let i = 0; i < str.Length; i++) { if(GetCurrent(i) != str[i]) { return false; } } return true; } function Eat(str!) { Assert.IsString(str); if(!Is(str)) { throw $"Expected {str}"; } _current += str.Length; } function IsWhiteSpace() { return Is("\n") || Is("\r") || Is(" ") || Is("\t"); } function SkipWhiteSpace() { while(!IsEOF() && IsWhiteSpace()) { MoveNext(); } } function ParseWord() { let r = ""; while(!IsWhiteSpace()) { r += GetCurrent(); MoveNext(); } return r; } function IsEOF() => _current >= _src.Length || _current < 0; function GetCurrent(offset?) => IsEOF() ? "\0" : _src[_current + (offset ?? 0)]; function MoveNext() { _current++; } function ReadComment() { let r = ""; while(!IsEOF() && GetCurrent() != "\n") { r += GetCurrent(); MoveNext(); } return r; } function ReadMultilineComment() { let r = GetCurrent(); MoveNext(); r += GetCurrent(); MoveNext(); while(!IsEOF() && GetCurrent() != "*" && GetCurrent(1) != "/") { r += GetCurrent(); MoveNext(); } r += GetCurrent(); MoveNext(); r += GetCurrent(); MoveNext(); return r; } function ReadString() { let r = GetCurrent(); MoveNext(); while(!IsEOF() && GetCurrent() != "\"") { r += GetCurrent(); if(GetCurrent() == "\\") { MoveNext(); r += GetCurrent(); } MoveNext(); } r += GetCurrent(); MoveNext(); return r; } function StripComments() { let r = ""; while(!IsEOF()) { let c = GetCurrent(); if(c == "/" && GetCurrent(1) == "/") { ReadComment(); } else if(c == "/" && GetCurrent(1) == "*") { ReadMultilineComment(); } else if(c == "\"") { r += ReadString(); } else { r += c; MoveNext(); } } return r; } } const System = { Assert: Assert, Enumerables: Enumerables, Events: Events, Logging: Logging, SourceReader: SourceReader } Runtime.Export("System", System);