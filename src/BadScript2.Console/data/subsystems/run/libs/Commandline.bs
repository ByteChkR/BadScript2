class Command { let Table ResultTable; function Command(Table resultTable) { ResultTable = resultTable; } function HasKey(string name) { return ResultTable.Keys.Contains(name); } function HasValues(string name) { return HasKey(name) && ResultTable[name].Length != 0; } function GetValues(string name) { if(!HasKey(name)) { throw $"Can not find setting {name}"; } return ResultTable[name]; } } class Parameter { let string LongName; let string ShortName; let string HelpText; let DefaultValue; let bool Required; let string ResultName; function Parameter(string longName!, string shortName!, string resultName!, string helpText?, defaultValue?, bool required?) { LongName = longName; ShortName = shortName; ResultName = resultName; HelpText = helpText ?? "NO HELP TEXT FOUND"; DefaultValue = defaultValue; Required = required ?? false; } function bool IsName(string str) => str == LongName || str == ShortName; } class CommandLineParser { let Array Parameters; function CommandLineParser(Array parameters!) { Parameters = parameters; } function Parameter FindByName(string name) { foreach(param in Parameters) { if(param.LongName == name || param.ShortName == name) { return param; } } return null; } function Parameter FindByResultName(string resultName) { foreach(param in Parameters) { if(param.ResultName == resultName) { return param; } } return null; } function Parse(Array args) { let t = {} let currentKey = "DEFAULT"; let currentArr = []; t[currentKey] = currentArr; for(let i = 0; i < args.Length; i++) { let Parameter param = FindByName(args[i]); if(param == null) { currentArr.Add(args[i]); } else { currentKey = param.ResultName; currentArr = []; t[currentKey] = currentArr; } } let Array tKeys = t.Keys; foreach(param in Parameters) { if(!tKeys.Contains(param.ResultName)) { if(param.Required) { throw $"Missing parameter {param}."; } if(param.DefaultValue != null) { t[param.ResultName] = [param.DefaultValue]; } } } return new Command(t); } } function CreateParser(Array parameters) { return new CommandLineParser(parameters); } Runtime.Export("Commandline", {Parameter: Parameter, CreateParser: CreateParser});