function Table Infinite(any obj) { function Table GetEnumerator() { function any GetCurrent() => obj; function bool MoveNext() => true; return { GetCurrent: GetCurrent, MoveNext: MoveNext }; } return { GetEnumerator: GetEnumerator }; } function Table Repeat(any obj, num number) { if(number < 0) { throw "Repeat amount can not be negative"; } function Table GetEnumerator() { let i = 0; function any GetCurrent() => obj; function bool MoveNext() { i++; return i <= number; } return { GetCurrent: GetCurrent, MoveNext: MoveNext }; } return { GetEnumerator: GetEnumerator }; } function Table Range(num from, num to, num step?) { step ??= 1; if(from > to && step >= 0) { throw "Range Step must be negative from " + from + " to " + to; } if(from < to && step <= 0) { throw "Range Step must be positive from " + from + " to " + to; } function Table GetEnumerator() { let current = from - step; function num GetCurrent() => current; function bool MoveNext() { current += step; return !(from < to && current >= to) && !(from > to && current <= to); } return { GetCurrent: GetCurrent, MoveNext: MoveNext }; } return { GetEnumerator: GetEnumerator }; } export { Range: Range, Repeat: Repeat, Infinite: Infinite, Primes: Primes };