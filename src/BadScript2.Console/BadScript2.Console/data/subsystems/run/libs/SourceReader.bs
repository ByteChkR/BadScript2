import Assert from '<Assert>'; export default class SourceReader { const string _src; let num _current; function SourceReader(src!) { Assert.IsString(src); _src = src; _current = 0; } compiled fast function bool Is(string str!) { for(let i = 0; i < str.Length; i++) { if(GetCurrent(i) != str[i]) { return false; } } return true; } compiled fast function string Eat(string str!) { if(!Is(str)) { throw $"Expected {str}"; } _current += str.Length; return str; } compiled fast function bool IsWhiteSpace() { return Is("\n") || Is("\r") || Is(" ") || Is("\t"); } compiled fast function SkipWhiteSpace() { while(!IsEOF() && IsWhiteSpace()) { MoveNext(); } } compiled fast function string ParseWord() { let r = ""; while(!IsWhiteSpace()) { r += GetCurrent(); MoveNext(); } return r; } compiled fast function bool IsEOF(num offset?) => (_current + (offset ?? 0)) >= _src.Length || (_current + (offset ?? 0)) < 0; compiled fast function string GetCurrent(num offset?) => IsEOF(offset) ? "\0" : _src[_current + (offset ?? 0)]; compiled fast function MoveNext() { _current++; } compiled fast function string ReadComment() { let r = ""; while(!IsEOF() && GetCurrent() != "\n") { r += GetCurrent(); MoveNext(); } return r; } compiled fast function string ReadMultilineComment() { let r = GetCurrent(); MoveNext(); r += GetCurrent(); MoveNext(); while(!IsEOF(1) && !Is("*/")) { r += GetCurrent(); MoveNext(); } r += GetCurrent(); MoveNext(); r += GetCurrent(); MoveNext(); return r; } compiled fast function string ReadMetaComment() { let r = GetCurrent(); MoveNext(); r += GetCurrent(); MoveNext(); while(!IsEOF(1) && !Is("|@")) { r += GetCurrent(); MoveNext(); } r += GetCurrent(); MoveNext(); r += GetCurrent(); MoveNext(); return r; } compiled fast function string ReadString() { const terminator = GetCurrent(); let r = terminator; MoveNext(); while(!IsEOF()) { let current = GetCurrent(); if(current == terminator) { break; } if(current == "\\") { const escaped = GetCurrent(1); r += "\\" + escaped; MoveNext(); MoveNext(); continue; } r += current; MoveNext(); } r += Eat(terminator); return r; } compiled fast function string StripComments() { let r = ""; while(!IsEOF()) { let c = GetCurrent(); if(c == "/" && GetCurrent(1) == "/") { ReadComment(); } else if(c == "/" && GetCurrent(1) == "*") { ReadMultilineComment(); } else if(c == "@" && GetCurrent(1) == "|") { ReadMetaComment(); } else if(c == "\"") { r += ReadString(); } else { r += c; MoveNext(); } } return r; } }