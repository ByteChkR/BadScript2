import Assert from '<Assert>'; function CheckSignature(a!, b!) { Assert.IsFunction(a); Assert.IsFunction(b); if(a.Parameters.Length != b.Parameters.Length) { throw $"Parameters of {a} and {b} do not match"; } } export default class Event { const Array _CallList; const Function _CallPrototype; function Event(Function callProto!) { Assert.IsFunction(callProto); _CallList = []; _CallPrototype = callProto; } function Remove(func!) { _CallList.Remove(func); } function Add(func!) { CheckSignature(_CallPrototype, func); _CallList.Add(func); } function Invoke(args*) { foreach(func in _CallList) { func.Invoke(args); } } function any op_AddAssign(func!) => Add(func); function any op_SubtractAssign(func!) => Remove(func); function any op_Invoke(args*) => Invoke(args); }