
const SECTION_TYPES = {
	CLASS_DEFINITION: "class-definition",
	NAMESPACE: "namespace",
	CLASS_INSTANCE: "class-instance"
};

const PROPERTY_TYPES = {
	FUNCTION: "function",
	VALUE: "value",
	CLASS_DEFINITION_BASE: "class-definition-base"
};

function IsSection(model)
{
	return Runtime.Native.IsArray(model) || Runtime.Native.IsTable(model) || Runtime.Native.IsPrototype(model) || Runtime.Native.IsPrototypeInstance(model);
}

function IsProperty(model)
{
	return !IsSection(model);
}

function CreateProperty(name, model)
{
	Console.WriteLine($"Creating Property for '{name}'");
	if(Runtime.Native.IsFunction(model))
	{
		const result = { Name: name, Type: PROPERTY_TYPES.FUNCTION };
		result.OriginalName = model.Name;
		result.Parameters = [];
		result.Return = model.Meta.Return;
		result.Description = model.Meta.Description;

		foreach(param in model.Parameters)
		{
			let description = "";
			if(model.Meta.Parameters.Keys.Contains(param.Name))
			{
				description = model.Meta.Parameters[param.Name].Description;
			}
			let type = "any";
			if(model.Meta.Parameters.Keys.Contains(param.Name))
			{
				type = model.Meta.Parameters[param.Name].Type;
			}
			result.Parameters.Add({ 
				Name: param.Name, 
				IsNullChecked: param.IsNullChecked, 
				IsOptional: param.IsOptional, 
				IsRestArgs: param.IsRestArgs, 
				Description: description,
				Type: type
			});
		}
		return result;
	}

	return { Name: name, Type: PROPERTY_TYPES.VALUE, Value: model };
}

function IsInternalClassMember(name)
{
	return name == "this" || name == "base";
}

function CreateProperties(model, blockInternalClassMembers, logBaseMember)
{
	const properties = [];
	if(Runtime.Native.IsArray(model))
	{
		for (let i = 0; i < model.Length; i++)
		{
			if(IsProperty(model[i]))
			{
				properties.Add(CreateProperty(i.ToString(), model[i]));
			}
		}
	}
	else if(Runtime.Native.IsTable(model))
	{
		const keys = model.Keys;
		for (let i = 0; i < keys.Length; i++)
		{
			const key = keys[i];
			const value = model[key];

			if(logBaseMember && blockInternalClassMembers && IsInternalClassMember(key) && key == "base")
			{
				if(value != null && Runtime.Native.IsPrototypeInstance(value))
				{
					const baseType = value.GetType().GetBaseClass();
					properties.Add({ Name: key, Type: PROPERTY_TYPES.CLASS_DEFINITION_BASE, ClassName: baseType.Name});
				}
			}
			if(IsProperty(value) && (!blockInternalClassMembers || !IsInternalClassMember(key)))
			{
				const prop = CreateProperty(key, value);
				
				properties.Add(prop);
			}
		}
	}
	return properties;
}

function CreateSections(model, blockInternalClassMembers)
{
	const sections = [];
	if(Runtime.Native.IsPrototype(model))
	{
		const cls = model.CreateInstance();
		return CreateSections(cls.GetClassScope().GetLocals());
	}
	else if(Runtime.Native.IsPrototypeInstance(model))
	{
		const type = GetType();
		return CreateSections(type.GetClassScope().GetLocals());
	}
	else if(Runtime.Native.IsArray(model))
	{
		for (let i = 0; i < model.Length; i++)
		{
			if(IsSection(model[i]))
			{
				sections.Add(CreateSection(i.ToString(), model[i]));
			}
		}
	}
	else if(Runtime.Native.IsTable(model))
	{
		const keys = model.Keys;
		for (let i = 0; i < keys.Length; i++)
		{
			const key = keys[i];
			const value = model[key];
			if(IsSection(value) && (!blockInternalClassMembers || !IsInternalClassMember(key)))
			{
				sections.Add(CreateSection(key, value));
			}
		}

	}
	return sections;
}


function CreateSection(name, model, isClassScope?, logBaseMember?)
{
	const blockInternalClassMembers = isClassScope ?? false;
	logBaseMember ??= false;
	if(Runtime.Native.IsPrototype(model))
	{
		const section = CreateSection(model.Name, model.CreateInstance().GetClassScope().GetLocals(), true, true);
		section.OriginalName = model.Name;
		section.Description = model.Meta.Description;
		section.SectionType = SECTION_TYPES.CLASS_DEFINITION;
		return section;
	}
	else if(Runtime.Native.IsPrototypeInstance(model))
	{
		const type = model.GetType();
		const section = CreateSection(type.Name, model.GetClassScope().GetLocals(), true);
		section.Description = type.Meta.Description;
		section.SectionType = SECTION_TYPES.CLASS_INSTANCE;
		return section;
	}

	Console.WriteLine($"Creating Section for '{name}'");
	const result = {
		SectionName: name,
		SectionType: SECTION_TYPES.NAMESPACE,
		Sections: CreateSections(model, blockInternalClassMembers),
		Properties: CreateProperties(model, blockInternalClassMembers, logBaseMember)
	};
	return result;
}


function LoadLibrary(name, path)
{
	const src = IO.File.ReadAllText(path);
	await Runtime.EvaluateAsync(src, path);
	return Runtime.Import(name);
}


function Main(args)
{
		if(args.Length == 0)
		{
			const sections = [];
			sections.Add(CreateSection("Console", Console));
			sections.Add(CreateSection("IO", IO));
			sections.Add(CreateSection("Runtime", Runtime));
			sections.Add(CreateSection("Math", Math));
			sections.Add(CreateSection("Compression", Compression));
			sections.Add(CreateSection("Net", Net));
			sections.Add(CreateSection("NetHost", NetHost));
			const result = {
				SectionName: "Common Runtime Apis",
				SectionType: SECTION_TYPES.NAMESPACE,
				Sections: sections,
				Properties: []
			};
			IO.File.WriteAllText("./.bsdoc.json", Json.ToJson(result));
			return;
		}
		if(args.Length < 1 || args.Length > 2)
		{
			Console.WriteLine("Wrong Parameter Count. Expected \"bs bsdoc <name> [path to library source, default:\"./bin/<name>.bs\"]\"");
			return;
		}
		const name = args[0];
		Console.WriteLine($"Name: {name}");
		const file = args.Length == 2 ? args[1] : $"./bin/{name}.bs";
		Console.WriteLine($"File: {file}");
		const data = CreateSection(name, LoadLibrary(name, file));
		Console.WriteLine(data);
		IO.File.WriteAllText("./.bsdoc.json", Json.ToJson(data));
}


Main(Runtime.GetArguments());