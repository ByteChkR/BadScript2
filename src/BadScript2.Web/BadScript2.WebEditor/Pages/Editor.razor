@page "/"
@using BadScript2.IO
@using BadScript2.IO.Virtual
@using BadScript2.Optimizations
@using BadScript2.Parser
@using BadScript2.Parser.Expressions
@using BadScript2.Runtime
@using BadScript2.Runtime.Objects
@using BadScript2.Runtime.Settings
@using BadScript2.Interop.Common.Apis
@using BadScript2.Interop.Common.Task
@using BadScript2.ConsoleCore.Systems.Run
@using System.Collections.Specialized
@using System.Web
@using System.Text
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<Modal Class="import-modal" @ref="@m_ImportModal">
    <ModalHeader>
        <ModalTitle Class="import-modal-title">Import Zip File</ModalTitle>
        <CloseButton Class="import-modal-close-button"/>
    </ModalHeader>
    <ModalBody Class="import-modal-body">
        <Field>
            <InputFile id="import-modal-upload-input" OnChange="@InputFileUpload" hidden="">Import</InputFile>
            <FieldLabel>Select Prebuilt Projects</FieldLabel>
            <Select class="import-modal-select" @bind-SelectedValue="@m_SelectedImportValue" TValue="string">
                <SelectGroup Class="import-modal-select-group" Label="Internal Images">
                    @foreach (string project in m_InternalProjects)
                    {
                        <SelectItem Class="import-modal-select-item" TValue="string">@project</SelectItem>
                    }
                </SelectGroup>
                <SelectGroup Class="import-modal-select-group" Label="Prebuilt Images">
                    @foreach (string project in m_PrebuiltProjects)
                    {
                        <SelectItem Class="import-modal-select-item" TValue="string">@project</SelectItem>
                    }
                </SelectGroup>
                <SelectGroup Class="import-modal-select-group" Label="Html Template Images">
                    @foreach (string project in m_HtmlProjects)
                    {
                        <SelectItem Class="import-modal-select-item" TValue="string">@project</SelectItem>
                    }
                </SelectGroup>
                <SelectGroup Class="import-modal-select-group" Label="Documentation Images">
                    @foreach (string project in m_DocumentationProjects)
                    {
                        <SelectItem Class="import-modal-select-item" TValue="string">@project</SelectItem>
                    }
                </SelectGroup>
            </Select>
        </Field>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Secondary" Clicked="@HideImportModalAndUpload">Upload File</Button>
        <Button Color="Color.Secondary" Clicked="@HideImportModal">Close</Button>
        <Button Color="Color.Primary" Clicked="@HideImportModalAndImport">Import</Button>
    </ModalFooter>
</Modal>
<div style="height: calc(100% - @(m_ConsoleHeight)px)" class="editor-content">
    <div hidden="@m_HideFileSystemView" class="sidebar">
        <div class="sidebar-header">
            <button class="sidebar-header-button" onclick="@Open">Open</button>
            <button class="sidebar-header-button" onclick="@Save">Save</button>
            <button class="sidebar-header-button" onclick="@OpenImportModal">Import</button>
            <button class="sidebar-header-button" onclick="@ExportProject">Export</button>
            <button class="sidebar-header-button" onclick="@HideSideBar">Hide</button>
        </div>
        <FileSystemView SelectedNodeChanged="@SelectedNodeChanged" FileSystem="@FileSystem" OnRunFile="@RunFile" OnOpenFile="@OpenFile"></FileSystemView>
    </div>
    <div style="height: 100%; display: flex; flex-direction: column;" class="editor-container">
        <button style="width: 100%; flex-grow: 0" hidden="@(!m_HideFileSystemView)" onclick="@ShowSideBar" class="show-sidebar">Show Side Bar</button>
        <button style="width: 100%; flex-grow: 0" hidden="@(!m_HideScriptOutput)" onclick="@ShowConsoleOutput" class="show-sidebar">Show Console Output</button>
        <Tabs @ref="m_Tabs" @bind-SelectedTab="@m_SelectedFile">
            <Items>
                @if (m_OpenFiles.Count == 0)
                {
                    <Tab Name="home">Home</Tab>
                }
                @foreach (KeyValuePair<string, CodeEditor?> file in m_OpenFiles)
                {
                    <Tab Name="@(file.Key)">
                        @(Path.GetFileName(file.Key))<button onclick="@(() => CloseFile(file.Key))">X</button>
                    </Tab>
                }
            </Items>
            <Content>
                @if (m_OpenFiles.Count == 0)
                {
                    <TabPanel Name="home">
                        <p class="home-text">
                            Create a new File and start coding!
                            <br/>
                            OR
                            <br/>
                            Import a prebuilt project and go explore!
                        </p>
                    </TabPanel>
                }
                @foreach (KeyValuePair<string, CodeEditor?> file in m_OpenFiles)
                {
                    <TabPanel Style="height: 100%;" Name="@(file.Key)">
                        <CodeEditor Language="@(GetLanguage(file.Key))" OnEditorInitialized="@(e => InitFileEditor(file.Key, e))"></CodeEditor>
                    </TabPanel>
                }
            </Content>
        </Tabs>
    </div>
    <div hidden="@m_HideScriptOutput" class="logout">
        <button style="width: 100%; flex-grow: 0" onclick="@HideConsoleOutput" class="show-sidebar">Hide Console Output</button>
        <textarea style="width: 100%; height: 100%; resize: none; background-color: #0e0e0e; color: white;" readonly>@m_ConsoleOutput</textarea>
    </div>
</div>
<div style="height: @(m_ConsoleHeight)px; width: 100%; min-width: 1000px">
    <SimpleConsole OnSizeChangedEvent="@OnSizeChanged" OnFileSystemChanged="@FileSystemChanged" OnRunFile="@RunFile"></SimpleConsole>
</div>
<style>

    .nav-tabs,
    .nav-link {
        background-color: #1e1e1e;
        color: white;
    }
    .nav-link.active.show {
        background-color: #0e0e0e;
    }
    
    .home-text
    {
        text-align: center;
        color: white;
    }

    .tab-content {
        height:  100%;
        background-color: #1e1e1e;
    }

    .editor-content {
        display: flex;
        flex-direction: row;
        overflow-y: hidden;
        overflow-x: auto;
    }
    
    .import-modal {
        background-color: #0e0e0e;
        color: white;
        height: auto;
        margin: 100px;
        width: calc(100% - 200px);
    }
    .import-modal-body {
        background-color: #1e1e1e;
        color: white;
    }
    
    .import-modal-title {
        color: white;
    }
    
    .import-modal-select-group {
        color: white;
        background-color: #0e0e0e;
    }
    .import-modal-select {
        color: white;
        background-color: #0e0e0e;
    }
    .import-modal-select-item {
        color: white;
        background-color: #1e1e1e;
    }
    
    .import-modal-close-button {
        color: white;
    }
    
    
    button, input {
        background-color: #1e1e1e;
        transition: background-color 0.2s ease-in-out;
        color: white;
    }
        
    button:hover, input:hover {
        background-color: #0e0e0e;
    }
    
    
    .sidebar-header {
        padding-bottom: 15px;
        display: flex;
    }
    
    .sidebar-header-button {
        flex-grow: 1;
    }
    
    
    .editor-container {
        flex: 1;
        height: 100%;
        width: calc(100% - 600px);
        min-width: 400px;
    }

    .sidebar {
        width: 300px;
        height: 100%;
        flex-grow: 0;
        flex-shrink: 0;
        background-color: #0e0e0e;
    }
    
    .logout {
        width: 300px;
        height: 100%;
        flex-grow: 0;
        flex-shrink: 0;
        background-color: #0e0e0e;
    }
    
    .sidebar > .tree-view {
        overflow-y: auto;
        height: calc(100% - 75px);
    }
</style>

@code {


    private Tabs? m_Tabs;
    private string m_ConsoleOutput = "";


    private BadVirtualNode? SelectedNode { get; set; }

    private readonly Dictionary<string, CodeEditor?> m_OpenFiles = new Dictionary<string, CodeEditor?>();
    private bool m_HideScriptOutput;
    private bool m_HideFileSystemView;
    private string m_SelectedImportValue = "";
    private int m_ConsoleHeight = 200;
    private Modal? m_ImportModal;
    private string? m_SelectedFile = "home";

    private readonly string[] m_InternalProjects =
    {
        "images/bootstrap/RootFS.zip"
    };

    private readonly string[] m_PrebuiltProjects =
    {
        "images/Minimal.zip",
        "images/EmptyProject.zip",
        "images/CoreProjects.zip"
    };

    private readonly string[] m_HtmlProjects =
    {
        "images/html/Empty.zip"
    };

    private readonly string[] m_DocumentationProjects =
    {
        "images/docs/01_Variables.zip",
        "images/docs/02_Loops.zip",
        "images/docs/03_Arrays.zip",
        "images/docs/04_Tables.zip",
        "images/docs/05_Functions.zip"
    };


    private void HideSideBar()
    {
        m_HideFileSystemView = true;
    }

    private void ShowSideBar()
    {
        m_HideFileSystemView = false;
    }

    private void ShowConsoleOutput()
    {
        m_HideScriptOutput = false;
    }

    private void HideConsoleOutput()
    {
        m_HideScriptOutput = true;
    }


    private void OnSizeChanged(int size)
    {
        m_ConsoleHeight = size;
    }

    private void ExportProject()
    {
        MemoryStream ms = new MemoryStream();
        BadFileSystem.Instance.ExportZip(ms);
        JsRuntime.DownloadFile("Export.zip", ms.ToArray());
    }

    private void CloseFile(string file)
    {
        m_OpenFiles.Remove(file);
        if (m_Tabs?.SelectedTab == file)
        {
            m_Tabs.SelectTab(m_OpenFiles.Count > 0 ? m_OpenFiles.Keys.First() : "home");
        }
    }

    private void HideImportModalAndUpload()
    {
        m_ImportModal?.Hide();
        UploadFile();
    }

    private void HideImportModal()
    {
        m_ImportModal?.Hide();
    }


    private void OpenImportModal()
    {
        m_ImportModal?.Show();
    }

    private void HideImportModalAndImport()
    {
        m_ImportModal?.Hide();
        Console.WriteLine("Importing: " + m_SelectedImportValue);
        ImportZip(m_SelectedImportValue);
    }

    private void ImportZipData(byte[] data)
    {
        MemoryStream v = new MemoryStream(data);
        BadFileSystem.Instance.ImportZip(v);
        FileSystemChanged();
    }

    private async void ImportZip(string url)
    {
        ImportZipData(await HttpClient.GetByteArrayAsync(url));
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        BadConsoleApi? api = BadExecutionContextOptions.Default.Apis.FirstOrDefault(x => x is BadConsoleApi) as BadConsoleApi;
        if (api != null)
        {
            api.AllowInput = false;
            api.OnClear += () => m_ConsoleOutput = "";
            api.OnWrite += s => m_ConsoleOutput += s;
            api.OnWriteLine += s => m_ConsoleOutput += s + "\n";
        }

        RunStartup();
    }

    private void FileSystemChanged()
    {
        FileSystemView.Reload();
    }

    private void SelectedNodeChanged(BadVirtualNode? node)
    {
        SelectedNode = node;
    }

    private BadVirtualFileSystem FileSystem => (BadFileSystem.Instance as BadVirtualFileSystem)!;

    private string GetLanguage(string file)
    {
        string lang = "badscript";
        if (!file.EndsWith(".bs"))
            lang = Path.GetExtension(file).Remove(0, 1);
        if(file.EndsWith(".bhtml") || file.EndsWith(".html"))
            lang = "html";
        if(file.EndsWith(".md"))
            lang = "markdown";
        return lang;
    }

    private void InitFileEditor(string file, CodeEditor editor)
    {
        Console.WriteLine("Editor loaded for file: " + file);
        string lang = GetLanguage(file);
        editor.Open(BadFileSystem.ReadAllText(file), lang);
        m_OpenFiles[file] = editor;

        m_Tabs!.SelectTab(file);
    }

    public void OpenFile(string path)
    {
        m_OpenFiles.Add(path, null);
    }

    public void Open()
    {
        if (SelectedNode is BadVirtualFile file)
        {
            Console.WriteLine("Opening editor for file: " + file);
            OpenFile(file.AbsolutePath);
        }
    }


    public async void Save()
    {
        if (m_SelectedFile != null && m_OpenFiles.ContainsKey(m_SelectedFile))
        {
            Console.WriteLine("Saving File: " + m_SelectedFile);
            string path = m_SelectedFile;
            string content = await m_OpenFiles[m_SelectedFile]!.GetValue();
            BadFileSystem.WriteAllText(path, content);
        }
    }

    private void RunStartup()
    {
        BadRunSystem sys = new BadRunSystem();
        BadRunSystemSettings settings = new BadRunSystemSettings();
        settings.Files = Enumerable.Empty<string>();
        sys.Run(settings);
    }

    private void RunFile(string file)
    {
        m_ConsoleOutput = "";
        try
        {
            BadSourceParser parser = BadSourceParser.Create(file, BadFileSystem.ReadAllText(file));
            BadExecutionContext context = CreateOptions().Build();

            IEnumerable<BadExpression> exprs = parser.Parse();
            if (BadNativeOptimizationSettings.Instance.UseConstantExpressionOptimization)
            {
                exprs = BadExpressionOptimizer.Optimize(exprs);
            }

            BadTaskRunner.Instance.AddTask(
                new BadTask(new BadInteropRunnable(Run(context, context.Execute(exprs)).GetEnumerator()), "Main"),
                true
                );
            while (!BadTaskRunner.Instance.IsIdle)
            {
                BadTaskRunner.Instance.RunStep();
            }
        }
        catch (Exception e)
        {
            m_ConsoleOutput = e.ToString();
        }
    }


    private BadExecutionContextOptions CreateOptions()
    {
        BadExecutionContextOptions options = new BadExecutionContextOptions(BadExecutionContextOptions.Default.Apis);
        options.AddApi(new BadTaskRunnerApi(BadTaskRunner.Instance));

        return options;
    }

    private IEnumerable<BadObject> Run(BadExecutionContext context, IEnumerable<BadObject> exprs)
    {
        foreach (BadObject o in exprs)
        {
            yield return o;
        }

        if (context.Scope.IsError)
        {
            Console.WriteLine("Error: " + context.Scope.Error);
        }
    }

    private async void InputFileUpload(InputFileChangeEventArgs e)
    {
        using Stream s = e.File.OpenReadStream();
        byte[] data = new byte[e.File.Size];
        await s.ReadAsync(data, 0, (int)e.File.Size);
        ImportZipData(data);
    }

    private void UploadFile()
    {
        JsRuntime.ClickElement("import-modal-upload-input");
    }




}

@{
    NameValueCollection query = HttpUtility.ParseQueryString(new Uri(NavigationManager.Uri).Query);
    if (query.AllKeys.Any(x => x == "fs"))
    {
        string[]? urls = query.GetValues("fs")?.Select(x => Encoding.UTF8.GetString(Convert.FromBase64String(x))).ToArray();
        if (urls == null)
            return;

        Console.WriteLine("Urls Specified in parameter: " + string.Join(", ", urls));
        foreach (string url in urls)
        {
            ImportZip(url);
        }
    }

}