@using BadScript2.IO.Virtual
<TreeView Nodes="Items"
          GetChildNodes="@(item => item?.Children ?? Enumerable.Empty<BadVirtualNode>())"
          HasChildNodes="@(item => item?.HasChildren ?? false)"
          @bind-SelectedNode="SelectedNode"
          @bind-ExpandedNodes="ExpandedNodes">
    <NodeContent>@GetName(context)</NodeContent>
</TreeView>

<style>
    .tree-view-title,
    .tree-view-icon {
         color: white;
    }
</style>

@code {


    private static event Action? OnReload;

    public static void Reload()
    {
        OnReload?.Invoke();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        OnReload += StateHasChanged;
    }

    private string GetName(BadVirtualNode? node)
    {
        if (node == null) return "INVALID NODE";
        return node is BadVirtualRoot ? "/" : node.Name;
    }

    [Parameter]
    public BadVirtualFileSystem? FileSystem { get; set; }

    private BadVirtualNode? m_SelectedNode;

    [Parameter]
    public BadVirtualNode? SelectedNode
    {
        get => m_SelectedNode;
        set
        {
            m_SelectedNode = value;
            SelectedNodeChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<BadVirtualNode> SelectedNodeChanged { get; set; }


    public IList<BadVirtualNode?> ExpandedNodes { get; set; } = new List<BadVirtualNode?>();

    public IEnumerable<BadVirtualNode> Items => FileSystem?.GetRoot().Children ?? Enumerable.Empty<BadVirtualNode>();
}