@using BadScript2.IO.Virtual
<TreeView Nodes="Items"
          GetChildNodes="@(item => item?.Children ?? Enumerable.Empty<BadVirtualNode>())"
          HasChildNodes="@(item => item?.HasChildren ?? false)"
          @bind-SelectedNode="SelectedNode"
          @bind-ExpandedNodes="ExpandedNodes">
    <NodeContent>
        <div class="node-content" style="display: flex; flex-direction: row;">
            <p style="margin: 0; flex-grow: 1;">@GetName(context)</p>
            @if (GetName(context).EndsWith(".bs") && context == SelectedNode)
            {
                <button onclick="@(() => RunFile(context))" class="execute-button">
                    <svg width="24px" height="24px" viewBox="0 0 17 17" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        <g id="-" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                            <g id="Icon/playBig" fill="#00FF00">
                                <path d="M6,11 L11,8 L6,5 L6,11 Z M8,14.6 C4.4,14.6 1.4,11.6 1.4,8 C1.4,4.4 4.4,1.4 8,1.4 C11.6,1.4 14.6,4.4 14.6,8 C14.6,11.6 11.6,14.6 8,14.6 L8,14.6 Z M8,0 C3.6,0 0,3.6 0,8 C0,12.4 3.6,16 8,16 C12.4,16 16,12.4 16,8 C16,3.6 12.4,0 8,0 L8,0 Z" id="Fill-1">
                                </path>
                            </g>
                        </g>
                    </svg>
                </button>
            }
            @if (context is BadVirtualFile f)
            {
                <button onclick="@(() => OpenFile(context))" class="execute-button">
                    <svg width="24px" height="24px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <g id="Complete">
                            <g id="edit">
                                <g>
                                    <path d="M20,16v4a2,2,0,0,1-2,2H4a2,2,0,0,1-2-2V6A2,2,0,0,1,4,4H8" fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
                                    <polygon fill="none" points="12.5 15.8 22 6.2 17.8 2 8.3 11.5 8 16 12.5 15.8" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
                                </g>
                            </g>
                        </g>
                    </svg>
                </button>
            }
        </div>
    </NodeContent>
</TreeView>

<style>
    .tree-view-title > span {
        display: block;
    }

    .execute-button {
        background: none;
        border: none;
        padding: 0;
        margin: 0;
        width: 25px;
        height: 25px;
        cursor: pointer;
    }

    .tree-view-title,
    .tree-view-icon {
         color: white;
    }
</style>

@code {


    [Parameter]
    public EventCallback<string> OnRunFile { get; set; } = EventCallback<string>.Empty;

    [Parameter]
    public EventCallback<string> OnOpenFile { get; set; } = EventCallback<string>.Empty;

    private static event Action? OnReload;

    public static void Reload()
    {
        OnReload?.Invoke();
    }

    private void OpenFile(BadVirtualNode? node)
    {
        if (node is BadVirtualFile f)
        {
            OnOpenFile.InvokeAsync(f.AbsolutePath);
        }
    }

    private void RunFile(BadVirtualNode? node)
    {
        if (node is BadVirtualFile f)
        {
            OnRunFile.InvokeAsync(f.AbsolutePath);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        OnReload += StateHasChanged;
    }

    private string GetName(BadVirtualNode? node)
    {
        if (node == null)
            return "INVALID NODE";

        return node is BadVirtualRoot ? "/" : node.Name;
    }

    [Parameter]
    public BadVirtualFileSystem? FileSystem { get; set; }

    private BadVirtualNode? m_SelectedNode;

    [Parameter]
    public BadVirtualNode? SelectedNode
    {
        get => m_SelectedNode;
        set
        {
            m_SelectedNode = value;
            SelectedNodeChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<BadVirtualNode> SelectedNodeChanged { get; set; }


    public IList<BadVirtualNode?> ExpandedNodes { get; set; } = new List<BadVirtualNode?>();

    public IEnumerable<BadVirtualNode> Items => FileSystem?.GetRoot().Children ?? Enumerable.Empty<BadVirtualNode>();

}