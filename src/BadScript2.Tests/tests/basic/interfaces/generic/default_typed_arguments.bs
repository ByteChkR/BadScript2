let Assert = NUnit.Assert;

function Test_InterfaceTyped()
{
	interface I<B, N>
	{
		B F(N n!, B compute?);
	}
	class C : I<bool, num>
	{
		function bool F(num n!, bool compute?)
		{
			if(compute == false) return true;
			return n == 10;
		}
	}

	const I<bool, num> i = new C();
	const c = i.F(10) && i.F(1, false);
	Assert.IsTrue(c, "Interface Function did not return true");
}

NUnit.AddTest(Test_InterfaceTyped, "Generic Interface Default Typed Arguments");


