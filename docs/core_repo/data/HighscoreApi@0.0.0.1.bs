let Package;function(){Package = Runtime.Import("Package");}(); let WebFramework;function(){WebFramework = Package.Import("WebFramework");}(); class HighscoreDatabase { const highscores = {} function AddScore(string name!, num score!) { if(!highscores.Keys.Contains(name) || highscores[name] < score) { highscores[name] = score; } } function GetScore(string name!) { if(highscores.Keys.Contains(name)) { return highscores[name]; } return 0; } function GetScores() => highscores; } class HighscoreApi { const API_KEY; const app; const highscores = new HighscoreDatabase(); function HighscoreApi(prefix, apiKey) { API_KEY = apiKey; app = new WebFramework(prefix); app.MapExact("/get", GetScore); app.MapExact("/set", SetScore); app.MapExact("/list", ListScores); } function Error(ctx, num code, string msg) { ctx.Response.SetStatusCode(code); ctx.Response.SetContent(msg); ctx.Response.SetHeader("Access-Control-Allow-Origin", "*"); ctx.Response.Close(); } function Start() { app.Start(); } function GetScore(ctx) { const request = ctx.Request; const query = request.QueryString; if(request.HttpMethod != "GET") { Error(ctx, 400, "Invalid HTTP Method: " + request.HttpMethod); } else if(!query.Keys.Contains("key") || query["key"] != API_KEY) { Error(ctx, 401, "Invalid API Key"); } else if(!query.Keys.Contains("name") || query["name"] == "") { Error(ctx, 400, "Invalid Request. Missing 'name'"); } else { const response = ctx.Response; response.SetStatusCode(200); response.SetHeader("Access-Control-Allow-Origin", "*"); const name = query["name"]; const score = highscores.GetScore(name); Console.WriteLine($"/get: {name} : {score.ToString()}"); response.SetContent(score.ToString()); response.Close(); } } function SetScore(ctx) { const request = ctx.Request; const query = request.QueryString; if(request.HttpMethod != "POST") { Error(ctx, 400, "Invalid HTTP Method: " + request.HttpMethod); } else if(!query.Keys.Contains("key") || query["key"] != API_KEY) { Error(ctx, 401, "Invalid API Key"); } else { try { const str = Net.DecodeUriComponent(request.Content.AsString()); const body = Json.FromJson(str); if(!Runtime.Native.IsTable(body) || !body.Keys.Contains("name") || !body.Keys.Contains("score") || !Runtime.Native.IsString(body.name) || !Runtime.Native.IsNumber(body.score)) { throw "Invalid Json Body"; } else { const response = ctx.Response; Console.WriteLine($"/set: {body.name} : {body.score}"); highscores.AddScore(body.name, body.score); response.SetHeader("Access-Control-Allow-Origin", "*"); response.SetStatusCode(200); response.SetContent("Success"); response.Close(); } } catch(e) { Error(ctx, 400, e.ErrorObject); } } } function ListScores(ctx) { const request = ctx.Request; const query = request.QueryString; if(request.HttpMethod != "GET") { Error(ctx, 400, "Invalid HTTP Method: " + request.HttpMethod); } else if(!query.Keys.Contains("key") || query["key"] != API_KEY) { Error(ctx, 401, "Invalid API Key"); } else { const response = ctx.Response; response.SetStatusCode(200); const content = Json.ToJson(highscores.GetScores()); response.SetHeader("Access-Control-Allow-Origin", "*"); Console.WriteLine($"/list: {content}"); response.SetContent(content); response.Close(); } } } Runtime.Export("HighscoreApi", HighscoreApi);