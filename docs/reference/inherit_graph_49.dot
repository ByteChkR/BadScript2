digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node0 [id="Node000000",label="BadScript2.Parser.Expressions.\lBadExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_bad_expression.html",tooltip="Base Implementation for all Expressions used inside the Script."];
  Node0 -> Node1 [id="edge43_Node000000_Node000001",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 [id="Node000001",label="BadScript2.Parser.Expressions.\lConstant.BadConstantExpression\l\< bool \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_constant_expression.html",tooltip=" "];
  Node1 -> Node2 [id="edge44_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="BadScript2.Parser.Expressions.\lConstant.BadBooleanExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_boolean_expression.html",tooltip="Implements the Boolean Expression."];
  Node0 -> Node4 [id="edge45_Node000000_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="BadScript2.Parser.Expressions.\lConstant.BadConstantExpression\l\< decimal \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_constant_expression.html",tooltip=" "];
  Node4 -> Node5 [id="edge46_Node000004_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="BadScript2.Parser.Expressions.\lConstant.BadNumberExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_number_expression.html",tooltip="Implements the Number Expression."];
  Node0 -> Node6 [id="edge47_Node000000_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="BadScript2.Parser.Expressions.\lConstant.BadConstantExpression\l\< string \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_constant_expression.html",tooltip=" "];
  Node6 -> Node7 [id="edge48_Node000006_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="BadScript2.Parser.Expressions.\lConstant.BadStringExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_string_expression.html",tooltip="Implements the String Expression."];
  Node7 -> Node8 [id="edge49_Node000007_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="BadScript2.Parser.Expressions.\lVariables.BadFormattedStringExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_variables_1_1_bad_formatted_string_expression.html",tooltip="Implements the Formattted String Expression."];
  Node0 -> Node11 [id="edge50_Node000000_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="BadScript2.Interop.Common.\lTask.BadAwaitExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_interop_1_1_common_1_1_task_1_1_bad_await_expression.html",tooltip="Implements the 'await' expression."];
  Node0 -> Node12 [id="edge51_Node000000_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="BadScript2.Parser.Expressions.\lAccess.BadArrayAccessExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_access_1_1_bad_array_access_expression.html",tooltip="Implements the Array Access to set or get properties from an object. <Left>[<Right>]."];
  Node0 -> Node13 [id="edge52_Node000000_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="BadScript2.Parser.Expressions.\lAccess.BadArrayAccessReverseExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_access_1_1_bad_array_access_reverse_expression.html",tooltip="Implements the Reverse Array Access to set or get properties from an object. <Left>[^<Right>]."];
  Node0 -> Node14 [id="edge53_Node000000_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="BadScript2.Parser.Expressions.\lAccess.BadMemberAccessExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_access_1_1_bad_member_access_expression.html",tooltip="Implements the Member Access to set or get properties from an object. <Left>.<Right>"];
  Node0 -> Node15 [id="edge54_Node000000_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="BadScript2.Parser.Expressions.\lAccess.BadTernaryExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_access_1_1_bad_ternary_expression.html",tooltip="Implements the Ternary Expression <Left> ? <TrueRet> : <FalseRet>"];
  Node0 -> Node16 [id="edge55_Node000000_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="BadScript2.Parser.Expressions.\lBinary.BadAssignExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_bad_assign_expression.html",tooltip="Implements the Assign Expression <Left> = <Right>"];
  Node0 -> Node17 [id="edge56_Node000000_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="BadScript2.Parser.Expressions.\lBinary.BadBinaryExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_bad_binary_expression.html",tooltip="Base Implementation of all Binary Expressions."];
  Node17 -> Node18 [id="edge57_Node000017_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="BadScript2.Parser.Expressions.\lAccess.BadNullCoalescingAssignExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_access_1_1_bad_null_coalescing_assign_expression.html",tooltip="Implements the Null Coalescing Assign Expression <Left> ??= <Right>"];
  Node17 -> Node19 [id="edge58_Node000017_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="BadScript2.Parser.Expressions.\lAccess.BadNullCoalescingExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_access_1_1_bad_null_coalescing_expression.html",tooltip="Implements the Null Coalescing Expression <Left> ?? <Right>"];
  Node17 -> Node20 [id="edge59_Node000017_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="BadScript2.Parser.Expressions.\lBinary.BadInExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_bad_in_expression.html",tooltip=" "];
  Node17 -> Node21 [id="edge60_Node000017_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="BadScript2.Parser.Expressions.\lBinary.BadRangeExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_bad_range_expression.html",tooltip="Implements the Range Expression <Start>..<End>"];
  Node17 -> Node22 [id="edge61_Node000017_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="BadScript2.Parser.Expressions.\lBinary.Comparison.BadEqualityExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_comparison_1_1_bad_equality_expression.html",tooltip="Implements the Equality Expression <Left> == <Right>"];
  Node17 -> Node23 [id="edge62_Node000017_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="BadScript2.Parser.Expressions.\lBinary.Comparison.BadGreaterOrEqual\lExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_comparison_1_1_bad_greater_or_equal_expression.html",tooltip="Implements the Greater or Equal Expression <Left> >= <Right>"];
  Node17 -> Node24 [id="edge63_Node000017_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="BadScript2.Parser.Expressions.\lBinary.Comparison.BadGreaterThan\lExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_comparison_1_1_bad_greater_than_expression.html",tooltip="Implements the Greater Than Expression."];
  Node17 -> Node25 [id="edge64_Node000017_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="BadScript2.Parser.Expressions.\lBinary.Comparison.BadInequalityExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_comparison_1_1_bad_inequality_expression.html",tooltip="Implements the Inequality Expression."];
  Node17 -> Node26 [id="edge65_Node000017_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="BadScript2.Parser.Expressions.\lBinary.Comparison.BadLessOrEqual\lExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_comparison_1_1_bad_less_or_equal_expression.html",tooltip="Implements the Less or Equal Expression <Left> <= <Right>"];
  Node17 -> Node27 [id="edge66_Node000017_Node000027",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node27 [id="Node000027",label="BadScript2.Parser.Expressions.\lBinary.Comparison.BadLessThanExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_comparison_1_1_bad_less_than_expression.html",tooltip="Implements the Less Than Expression."];
  Node17 -> Node28 [id="edge67_Node000017_Node000028",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node28 [id="Node000028",label="BadScript2.Parser.Expressions.\lBinary.Logic.Assign.BadLogicAssign\lAndExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_logic_1_1_assign_1_1_bad_logic_assign_and_expression.html",tooltip="Implements the Assign Logic And Expression."];
  Node17 -> Node29 [id="edge68_Node000017_Node000029",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node29 [id="Node000029",label="BadScript2.Parser.Expressions.\lBinary.Logic.Assign.BadLogicAssign\lOrExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_logic_1_1_assign_1_1_bad_logic_assign_or_expression.html",tooltip="Implements the Assign Logic Or Expression."];
  Node17 -> Node30 [id="edge69_Node000017_Node000030",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node30 [id="Node000030",label="BadScript2.Parser.Expressions.\lBinary.Logic.Assign.BadLogicAssign\lXOrExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_logic_1_1_assign_1_1_bad_logic_assign_x_or_expression.html",tooltip="Implements the Assign Logic Exclusive Or Expression."];
  Node17 -> Node31 [id="edge70_Node000017_Node000031",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node31 [id="Node000031",label="BadScript2.Parser.Expressions.\lBinary.Logic.BadLogicAndExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_logic_1_1_bad_logic_and_expression.html",tooltip="Implements the Logic And Expression."];
  Node17 -> Node32 [id="edge71_Node000017_Node000032",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node32 [id="Node000032",label="BadScript2.Parser.Expressions.\lBinary.Logic.BadLogicOrExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_logic_1_1_bad_logic_or_expression.html",tooltip="Implements the Logic Or Expression."];
  Node17 -> Node33 [id="edge72_Node000017_Node000033",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node33 [id="Node000033",label="BadScript2.Parser.Expressions.\lBinary.Logic.BadLogicXOrExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_logic_1_1_bad_logic_x_or_expression.html",tooltip="Implements the Logic Exclusive Or Expression."];
  Node17 -> Node34 [id="edge73_Node000017_Node000034",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node34 [id="Node000034",label="BadScript2.Parser.Expressions.\lBinary.Math.Assign.BadAddAssignExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_assign_1_1_bad_add_assign_expression.html",tooltip="Implements the Add Assignment Expression."];
  Node17 -> Node35 [id="edge74_Node000017_Node000035",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node35 [id="Node000035",label="BadScript2.Parser.Expressions.\lBinary.Math.Assign.BadDivideAssign\lExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_assign_1_1_bad_divide_assign_expression.html",tooltip="Implements the Divide Assignment Expression."];
  Node17 -> Node36 [id="edge75_Node000017_Node000036",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node36 [id="Node000036",label="BadScript2.Parser.Expressions.\lBinary.Math.Assign.BadModulusAssign\lExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_assign_1_1_bad_modulus_assign_expression.html",tooltip="Implements the Modulus Assign Expression."];
  Node17 -> Node37 [id="edge76_Node000017_Node000037",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node37 [id="Node000037",label="BadScript2.Parser.Expressions.\lBinary.Math.Assign.BadMultiplyAssign\lExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_assign_1_1_bad_multiply_assign_expression.html",tooltip="Implements the Multiply Assignment Expression."];
  Node17 -> Node38 [id="edge77_Node000017_Node000038",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node38 [id="Node000038",label="BadScript2.Parser.Expressions.\lBinary.Math.Assign.BadSubtractAssign\lExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_assign_1_1_bad_subtract_assign_expression.html",tooltip="Implements the Subtract Assign Expression."];
  Node17 -> Node39 [id="edge78_Node000017_Node000039",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node39 [id="Node000039",label="BadScript2.Parser.Expressions.\lBinary.Math.BadAddExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_bad_add_expression.html",tooltip="Implements the Add Expression."];
  Node17 -> Node40 [id="edge79_Node000017_Node000040",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node40 [id="Node000040",label="BadScript2.Parser.Expressions.\lBinary.Math.BadDivideExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_bad_divide_expression.html",tooltip="Implements the Divide Expression."];
  Node17 -> Node41 [id="edge80_Node000017_Node000041",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node41 [id="Node000041",label="BadScript2.Parser.Expressions.\lBinary.Math.BadModulusExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_bad_modulus_expression.html",tooltip="Implements the Modulus Expression."];
  Node17 -> Node42 [id="edge81_Node000017_Node000042",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node42 [id="Node000042",label="BadScript2.Parser.Expressions.\lBinary.Math.BadMultiplyExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_bad_multiply_expression.html",tooltip="Implements the Multiply Expression."];
  Node17 -> Node43 [id="edge82_Node000017_Node000043",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node43 [id="Node000043",label="BadScript2.Parser.Expressions.\lBinary.Math.BadSubtractExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_bad_subtract_expression.html",tooltip="Implements the Subtract Expression."];
  Node0 -> Node44 [id="edge83_Node000000_Node000044",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node44 [id="Node000044",label="BadScript2.Parser.Expressions.\lBinary.Logic.BadLogicNotExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_logic_1_1_bad_logic_not_expression.html",tooltip="Implements the Logic Not Exression."];
  Node0 -> Node45 [id="edge84_Node000000_Node000045",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node45 [id="Node000045",label="BadScript2.Parser.Expressions.\lBinary.Math.Atomic.BadPostDecrement\lExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_atomic_1_1_bad_post_decrement_expression.html",tooltip="Implements the Post Decrement Expression."];
  Node0 -> Node46 [id="edge85_Node000000_Node000046",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node46 [id="Node000046",label="BadScript2.Parser.Expressions.\lBinary.Math.Atomic.BadPostIncrement\lExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_atomic_1_1_bad_post_increment_expression.html",tooltip="Implements the Post Increment Expression."];
  Node0 -> Node47 [id="edge86_Node000000_Node000047",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node47 [id="Node000047",label="BadScript2.Parser.Expressions.\lBinary.Math.Atomic.BadPreDecrement\lExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_atomic_1_1_bad_pre_decrement_expression.html",tooltip="Implements the Pre Decrement Expression."];
  Node0 -> Node48 [id="edge87_Node000000_Node000048",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 [id="Node000048",label="BadScript2.Parser.Expressions.\lBinary.Math.Atomic.BadPreIncrement\lExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_atomic_1_1_bad_pre_increment_expression.html",tooltip="Implements the Pre Increment Expression."];
  Node0 -> Node49 [id="edge88_Node000000_Node000049",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="BadScript2.Parser.Expressions.\lBlock.BadIfExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_block_1_1_bad_if_expression.html",tooltip="Implements the If Statement Expression."];
  Node0 -> Node50 [id="edge89_Node000000_Node000050",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node50 [id="Node000050",label="BadScript2.Parser.Expressions.\lBlock.BadTryCatchExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_block_1_1_bad_try_catch_expression.html",tooltip="Implements the Try Catch Statement Expression."];
  Node0 -> Node51 [id="edge90_Node000000_Node000051",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node51 [id="Node000051",label="BadScript2.Parser.Expressions.\lBlock.Lock.BadLockExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_block_1_1_lock_1_1_bad_lock_expression.html",tooltip="Implements the Lock Expression."];
  Node0 -> Node52 [id="edge91_Node000000_Node000052",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node52 [id="Node000052",label="BadScript2.Parser.Expressions.\lBlock.Loop.BadForEachExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_block_1_1_loop_1_1_bad_for_each_expression.html",tooltip="Implements the For Each Expression."];
  Node0 -> Node53 [id="edge92_Node000000_Node000053",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node53 [id="Node000053",label="BadScript2.Parser.Expressions.\lBlock.Loop.BadForExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_block_1_1_loop_1_1_bad_for_expression.html",tooltip="Implements the For Loop Expression."];
  Node0 -> Node54 [id="edge93_Node000000_Node000054",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node54 [id="Node000054",label="BadScript2.Parser.Expressions.\lBlock.Loop.BadWhileExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_block_1_1_loop_1_1_bad_while_expression.html",tooltip="Implements the While Expression."];
  Node0 -> Node55 [id="edge94_Node000000_Node000055",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node55 [id="Node000055",label="BadScript2.Parser.Expressions.\lConstant.BadArrayExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_array_expression.html",tooltip="Implements the Array Expression."];
  Node0 -> Node9 [id="edge95_Node000000_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="BadScript2.Parser.Expressions.\lConstant.BadConstantExpression\< T \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_constant_expression.html",tooltip="Base Class of all Constant Expressions."];
  Node0 -> Node10 [id="edge96_Node000000_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="BadScript2.Parser.Expressions.\lConstant.BadNullExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_null_expression.html",tooltip="Implements the Null Expression."];
  Node0 -> Node56 [id="edge97_Node000000_Node000056",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node56 [id="Node000056",label="BadScript2.Parser.Expressions.\lConstant.BadTableExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_table_expression.html",tooltip="Implements the Table Expression."];
  Node0 -> Node57 [id="edge98_Node000000_Node000057",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node57 [id="Node000057",label="BadScript2.Parser.Expressions.\lControlFlow.BadBreakExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_control_flow_1_1_bad_break_expression.html",tooltip="Implements the Break Expression that is used to prematurely exit a loop."];
  Node0 -> Node58 [id="edge99_Node000000_Node000058",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node58 [id="Node000058",label="BadScript2.Parser.Expressions.\lControlFlow.BadContinueExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_control_flow_1_1_bad_continue_expression.html",tooltip="Implements the Break Expression that is used to skip a loop iteraion."];
  Node0 -> Node59 [id="edge100_Node000000_Node000059",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node59 [id="Node000059",label="BadScript2.Parser.Expressions.\lControlFlow.BadReturnExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_control_flow_1_1_bad_return_expression.html",tooltip="Implements the Return expression that is used to exit the current function with an Optional Return Va..."];
  Node0 -> Node60 [id="edge101_Node000000_Node000060",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 [id="Node000060",label="BadScript2.Parser.Expressions.\lControlFlow.BadThrowExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_control_flow_1_1_bad_throw_expression.html",tooltip="Implements the Throw Expression that is used to raise errors inside the Script."];
  Node0 -> Node61 [id="edge102_Node000000_Node000061",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node61 [id="Node000061",label="BadScript2.Parser.Expressions.\lFunction.BadFunctionExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_function_1_1_bad_function_expression.html",tooltip="Implements the Function Expression."];
  Node0 -> Node62 [id="edge103_Node000000_Node000062",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node62 [id="Node000062",label="BadScript2.Parser.Expressions.\lFunction.BadInvocationExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_function_1_1_bad_invocation_expression.html",tooltip="Implements the Invocation Expression."];
  Node0 -> Node63 [id="edge104_Node000000_Node000063",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node63 [id="Node000063",label="BadScript2.Parser.Expressions.\lTypes.BadClassPrototypeExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_types_1_1_bad_class_prototype_expression.html",tooltip="Implements the Class Prototype Expression."];
  Node0 -> Node64 [id="edge105_Node000000_Node000064",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node64 [id="Node000064",label="BadScript2.Parser.Expressions.\lTypes.BadNewExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_types_1_1_bad_new_expression.html",tooltip="Implements the New Expression."];
  Node0 -> Node65 [id="edge106_Node000000_Node000065",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node65 [id="Node000065",label="BadScript2.Parser.Expressions.\lVariables.BadVariableExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_variables_1_1_bad_variable_expression.html",tooltip="Implements the Variable Expression."];
  Node65 -> Node66 [id="edge107_Node000065_Node000066",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node66 [id="Node000066",label="BadScript2.Parser.Expressions.\lVariables.BadVariableDefinitionExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_variables_1_1_bad_variable_definition_expression.html",tooltip="Implements the Variable Definition Expression."];
  Node3 [id="Node000003",label="BadScript2.Parser.Expressions.\lConstant.IBadNativeExpression",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$interface_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_i_bad_native_expression.html",tooltip="Gets implemented by all Constant/Native Expressions to provide fast access to the value without unwra..."];
  Node3 -> Node1 [id="edge108_Node000003_Node000001",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node4 [id="edge109_Node000003_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node6 [id="edge110_Node000003_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node9 [id="edge111_Node000003_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node10 [id="edge112_Node000003_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
}
