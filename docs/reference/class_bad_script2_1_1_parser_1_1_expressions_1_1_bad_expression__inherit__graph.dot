digraph "BadScript2.Parser.Expressions.BadExpression"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [id="Node000001",label="BadScript2.Parser.Expressions.\lBadExpression",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Base Implementation for all Expressions used inside the Script."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="BadScript2.Parser.Expressions.\lConstant.BadConstantExpression\l\< bool \>",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_constant_expression.html",tooltip=" "];
  Node2 -> Node3 [id="edge2_Node000002_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="BadScript2.Parser.Expressions.\lConstant.BadBooleanExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_boolean_expression.html",tooltip="Implements the Boolean Expression."];
  Node1 -> Node4 [id="edge3_Node000001_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="BadScript2.Parser.Expressions.\lConstant.BadConstantExpression\l\< decimal \>",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_constant_expression.html",tooltip=" "];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="BadScript2.Parser.Expressions.\lConstant.BadNumberExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_number_expression.html",tooltip="Implements the Number Expression."];
  Node1 -> Node6 [id="edge5_Node000001_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="BadScript2.Parser.Expressions.\lConstant.BadConstantExpression\l\< string \>",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_constant_expression.html",tooltip=" "];
  Node6 -> Node7 [id="edge6_Node000006_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="BadScript2.Parser.Expressions.\lConstant.BadStringExpression",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_string_expression.html",tooltip="Implements the String Expression."];
  Node1 -> Node9 [id="edge7_Node000001_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="BadScript2.Interop.Common.\lTask.BadAwaitExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_interop_1_1_common_1_1_task_1_1_bad_await_expression.html",tooltip="Implements the 'await' expression."];
  Node1 -> Node10 [id="edge8_Node000001_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="BadScript2.Parser.Expressions.\lAccess.BadArrayAccessExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_access_1_1_bad_array_access_expression.html",tooltip="Implements the Array Access to set or get properties from an object. <Left>[<Right>]."];
  Node1 -> Node11 [id="edge9_Node000001_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="BadScript2.Parser.Expressions.\lAccess.BadArrayAccessReverseExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_access_1_1_bad_array_access_reverse_expression.html",tooltip="Implements the Reverse Array Access to set or get properties from an object. <Left>[^<Right>]."];
  Node1 -> Node12 [id="edge10_Node000001_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="BadScript2.Parser.Expressions.\lAccess.BadMemberAccessExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_access_1_1_bad_member_access_expression.html",tooltip="Implements the Member Access to set or get properties from an object. <Left>.<Right>"];
  Node1 -> Node13 [id="edge11_Node000001_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="BadScript2.Parser.Expressions.\lAccess.BadTernaryExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_access_1_1_bad_ternary_expression.html",tooltip="Implements the Ternary Expression <Left> ? <TrueRet> : <FalseRet>"];
  Node1 -> Node14 [id="edge12_Node000001_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="BadScript2.Parser.Expressions.\lBinary.BadAssignExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_bad_assign_expression.html",tooltip="Implements the Assign Expression <Left> = <Right>"];
  Node1 -> Node15 [id="edge13_Node000001_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="BadScript2.Parser.Expressions.\lBinary.BadBinaryExpression",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_bad_binary_expression.html",tooltip="Base Implementation of all Binary Expressions."];
  Node15 -> Node16 [id="edge14_Node000015_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="BadScript2.Parser.Expressions.\lAccess.BadNullCoalescingAssignExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_access_1_1_bad_null_coalescing_assign_expression.html",tooltip="Implements the Null Coalescing Assign Expression <Left> ??= <Right>"];
  Node15 -> Node17 [id="edge15_Node000015_Node000017",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node17 [id="Node000017",label="BadScript2.Parser.Expressions.\lAccess.BadNullCoalescingExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_access_1_1_bad_null_coalescing_expression.html",tooltip="Implements the Null Coalescing Expression <Left> ?? <Right>"];
  Node15 -> Node18 [id="edge16_Node000015_Node000018",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node18 [id="Node000018",label="BadScript2.Parser.Expressions.\lBinary.BadRangeExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_bad_range_expression.html",tooltip="Implements the Range Expression <Start>..<End>"];
  Node15 -> Node19 [id="edge17_Node000015_Node000019",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node19 [id="Node000019",label="BadScript2.Parser.Expressions.\lBinary.Comparison.BadEqualityExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_comparison_1_1_bad_equality_expression.html",tooltip="Implements the Equality Expression <Left> == <Right>"];
  Node15 -> Node20 [id="edge18_Node000015_Node000020",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node20 [id="Node000020",label="BadScript2.Parser.Expressions.\lBinary.Comparison.BadGreaterOrEqual\lExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_comparison_1_1_bad_greater_or_equal_expression.html",tooltip="Implements the Greater or Equal Expression <Left> >= <Right>"];
  Node15 -> Node21 [id="edge19_Node000015_Node000021",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node21 [id="Node000021",label="BadScript2.Parser.Expressions.\lBinary.Comparison.BadGreaterThan\lExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_comparison_1_1_bad_greater_than_expression.html",tooltip="Implements the Greater Than Expression."];
  Node15 -> Node22 [id="edge20_Node000015_Node000022",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node22 [id="Node000022",label="BadScript2.Parser.Expressions.\lBinary.Comparison.BadInequalityExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_comparison_1_1_bad_inequality_expression.html",tooltip="Implements the Inequality Expression."];
  Node15 -> Node23 [id="edge21_Node000015_Node000023",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node23 [id="Node000023",label="BadScript2.Parser.Expressions.\lBinary.Comparison.BadLessOrEqual\lExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_comparison_1_1_bad_less_or_equal_expression.html",tooltip="Implements the Less or Equal Expression <Left> <= <Right>"];
  Node15 -> Node24 [id="edge22_Node000015_Node000024",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node24 [id="Node000024",label="BadScript2.Parser.Expressions.\lBinary.Comparison.BadLessThanExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_comparison_1_1_bad_less_than_expression.html",tooltip="Implements the Less Than Expression."];
  Node15 -> Node25 [id="edge23_Node000015_Node000025",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node25 [id="Node000025",label="BadScript2.Parser.Expressions.\lBinary.Logic.Assign.BadLogicAssign\lAndExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_logic_1_1_assign_1_1_bad_logic_assign_and_expression.html",tooltip="Implements the Assign Logic And Expression."];
  Node15 -> Node26 [id="edge24_Node000015_Node000026",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node26 [id="Node000026",label="BadScript2.Parser.Expressions.\lBinary.Logic.Assign.BadLogicAssign\lOrExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_logic_1_1_assign_1_1_bad_logic_assign_or_expression.html",tooltip="Implements the Assign Logic Or Expression."];
  Node1 -> Node41 [id="edge25_Node000001_Node000041",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node41 [id="Node000041",label="BadScript2.Parser.Expressions.\lBinary.Logic.BadLogicNotExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_logic_1_1_bad_logic_not_expression.html",tooltip="Implements the Logic Not Exression."];
  Node1 -> Node42 [id="edge26_Node000001_Node000042",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node42 [id="Node000042",label="BadScript2.Parser.Expressions.\lBinary.Math.Atomic.BadPostDecrement\lExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_atomic_1_1_bad_post_decrement_expression.html",tooltip="Implements the Post Decrement Expression."];
  Node1 -> Node43 [id="edge27_Node000001_Node000043",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node43 [id="Node000043",label="BadScript2.Parser.Expressions.\lBinary.Math.Atomic.BadPostIncrement\lExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_atomic_1_1_bad_post_increment_expression.html",tooltip="Implements the Post Increment Expression."];
  Node1 -> Node44 [id="edge28_Node000001_Node000044",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node44 [id="Node000044",label="BadScript2.Parser.Expressions.\lBinary.Math.Atomic.BadPreDecrement\lExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_atomic_1_1_bad_pre_decrement_expression.html",tooltip="Implements the Pre Decrement Expression."];
  Node1 -> Node45 [id="edge29_Node000001_Node000045",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node45 [id="Node000045",label="BadScript2.Parser.Expressions.\lBinary.Math.Atomic.BadPreIncrement\lExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_binary_1_1_math_1_1_atomic_1_1_bad_pre_increment_expression.html",tooltip="Implements the Pre Increment Expression."];
  Node1 -> Node46 [id="edge30_Node000001_Node000046",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node46 [id="Node000046",label="BadScript2.Parser.Expressions.\lBlock.BadIfExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_block_1_1_bad_if_expression.html",tooltip="Implements the If Statement Expression."];
  Node1 -> Node47 [id="edge31_Node000001_Node000047",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node47 [id="Node000047",label="BadScript2.Parser.Expressions.\lBlock.BadTryCatchExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_block_1_1_bad_try_catch_expression.html",tooltip="Implements the Try Catch Statement Expression."];
  Node1 -> Node48 [id="edge32_Node000001_Node000048",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node48 [id="Node000048",label="BadScript2.Parser.Expressions.\lBlock.Lock.BadLockExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_block_1_1_lock_1_1_bad_lock_expression.html",tooltip="Implements the Lock Expression."];
  Node1 -> Node49 [id="edge33_Node000001_Node000049",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node49 [id="Node000049",label="BadScript2.Parser.Expressions.\lBlock.Loop.BadForEachExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_block_1_1_loop_1_1_bad_for_each_expression.html",tooltip="Implements the For Each Expression."];
  Node1 -> Node50 [id="edge34_Node000001_Node000050",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node50 [id="Node000050",label="BadScript2.Parser.Expressions.\lBlock.Loop.BadForExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_block_1_1_loop_1_1_bad_for_expression.html",tooltip="Implements the For Loop Expression."];
  Node1 -> Node51 [id="edge35_Node000001_Node000051",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node51 [id="Node000051",label="BadScript2.Parser.Expressions.\lBlock.Loop.BadWhileExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_block_1_1_loop_1_1_bad_while_expression.html",tooltip="Implements the While Expression."];
  Node1 -> Node52 [id="edge36_Node000001_Node000052",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node52 [id="Node000052",label="BadScript2.Parser.Expressions.\lConstant.BadArrayExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_array_expression.html",tooltip="Implements the Array Expression."];
  Node1 -> Node53 [id="edge37_Node000001_Node000053",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node53 [id="Node000053",label="BadScript2.Parser.Expressions.\lConstant.BadConstantExpression\< T \>",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_constant_expression.html",tooltip="Base Class of all Constant Expressions."];
  Node1 -> Node54 [id="edge38_Node000001_Node000054",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node54 [id="Node000054",label="BadScript2.Parser.Expressions.\lConstant.BadNullExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_null_expression.html",tooltip="Implements the Null Expression."];
  Node1 -> Node55 [id="edge39_Node000001_Node000055",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node55 [id="Node000055",label="BadScript2.Parser.Expressions.\lConstant.BadTableExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_constant_1_1_bad_table_expression.html",tooltip="Implements the Table Expression."];
  Node1 -> Node56 [id="edge40_Node000001_Node000056",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node56 [id="Node000056",label="BadScript2.Parser.Expressions.\lControlFlow.BadBreakExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_control_flow_1_1_bad_break_expression.html",tooltip="Implements the Break Expression that is used to prematurely exit a loop."];
  Node1 -> Node57 [id="edge41_Node000001_Node000057",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node57 [id="Node000057",label="BadScript2.Parser.Expressions.\lControlFlow.BadContinueExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_control_flow_1_1_bad_continue_expression.html",tooltip="Implements the Break Expression that is used to skip a loop iteraion."];
  Node1 -> Node58 [id="edge42_Node000001_Node000058",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node58 [id="Node000058",label="BadScript2.Parser.Expressions.\lControlFlow.BadReturnExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_control_flow_1_1_bad_return_expression.html",tooltip="Implements the Return expression that is used to exit the current function with an Optional Return Va..."];
  Node1 -> Node59 [id="edge43_Node000001_Node000059",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node59 [id="Node000059",label="BadScript2.Parser.Expressions.\lControlFlow.BadThrowExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_control_flow_1_1_bad_throw_expression.html",tooltip="Implements the Throw Expression that is used to raise errors inside the Script."];
  Node1 -> Node60 [id="edge44_Node000001_Node000060",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node60 [id="Node000060",label="BadScript2.Parser.Expressions.\lFunction.BadFunctionExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_function_1_1_bad_function_expression.html",tooltip="Implements the Function Expression."];
  Node1 -> Node61 [id="edge45_Node000001_Node000061",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node61 [id="Node000061",label="BadScript2.Parser.Expressions.\lFunction.BadInvocationExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_function_1_1_bad_invocation_expression.html",tooltip="Implements the Invocation Expression."];
  Node1 -> Node62 [id="edge46_Node000001_Node000062",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node62 [id="Node000062",label="BadScript2.Parser.Expressions.\lTypes.BadClassPrototypeExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_types_1_1_bad_class_prototype_expression.html",tooltip="Implements the Class Prototype Expression."];
  Node1 -> Node63 [id="edge47_Node000001_Node000063",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node63 [id="Node000063",label="BadScript2.Parser.Expressions.\lTypes.BadNewExpression",height=0.2,width=0.4,color="gray40", fillcolor="white", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_types_1_1_bad_new_expression.html",tooltip="Implements the New Expression."];
  Node1 -> Node64 [id="edge48_Node000001_Node000064",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node64 [id="Node000064",label="BadScript2.Parser.Expressions.\lVariables.BadVariableExpression",height=0.2,width=0.4,color="red", fillcolor="#FFF0F0", style="filled",URL="$class_bad_script2_1_1_parser_1_1_expressions_1_1_variables_1_1_bad_variable_expression.html",tooltip="Implements the Variable Expression."];
}
